function IS_profile(id, config, calendar_id, rights, container, data, organization_contacts,partners_contacts_points){	var t = this;	if(typeof(container) == "string") container = document.getElementById(container);	var required = 0;	require("popup_window.js",function(){required = required +1; everything_ready();})	require("address_text.js",function(){required = required +1; everything_ready();})	require("edit_address.js",function(){required = required +1; everything_ready();})	require("contacts.js",function(){required = required +1; everything_ready();})		t.init = function(){		if((id == -1 && !rights.manage) || (id == "-1" && !rights.manage)) error_dialog("You are not allowed to add an Information Session");		t.setHeader();		t.setTableAddress();		t.setTablePartners();	}		t.resetAll = function(div_locker){		t.resetTableAddress(div_locker);		setTimeout(t.resetTablePartners(div_locker),100);			}		t.setHeader = function(){		var div_header = document.createElement("div");		div_header.innerHTML = "<center>Information Session Profile</center>";		div_header.style.fontWeight = "bold";		div_header.style.fontSize = "x-large";		container.appendChild(div_header);		//if(config[config.findIndex("give_name_to_IS")])	}		t.setTableAddress = function(){		var table_address = document.createElement("table");		/* Table address is stored in the t object */		t.table_address = table_address;				var theader = document.createElement("thead");		var tbody = document.createElement("tbody");		var tr = document.createElement("tr");		var th_header = document.createElement("th");		var tr_body = document.createElement("tr");		var td_body = document.createElement("td");		var tfoot = document.createElement("tfoot");		var host = data.getHost();				/* One address is set in the data object */		if(host != null && host.index == null){			var text = new address_text(data.address);			td_body.appendChild(text.element);			if(rights.manage) t.addSetAddressButton(tfoot, host);		}		/* No address is set in the data object but one host is set */		if(host != null && host.index != null){			var temp_address = organization_contacts.getAddressFromPartnerAndAddressId(data.partners[host.index].organization, host.id);			if(temp_address != null && temp_address != {}){				var text = new address_text(temp_address);				td_body.appendChild(text.element);				if(rights.manage) t.addSetAddressButton(tfoot, host);			}		}				/* No address nor host is set */		if(host == null){			td_body.innerHTML = "No location is set for this Information Session";			td_body.style.fontStyle = "italic";			if(rights.manage) t.addSetAddressButton(tfoot, host);		}				/* Add remove address button */		if(rights.manage && host != null) t.addRemoveAddressButton(tfoot);		tfoot.style.display = "inline-block";						th_header.innerHTML = "<img src = '/static/contact/address_16.png' style = 'vertical-align:bottom'/> Location";		tr.appendChild(th_header);		theader.appendChild(tr);		tr_body.appendChild(td_body);		tbody.appendChild(tr_body);		table_address.appendChild(theader);		table_address.appendChild(tbody);		table_address.appendChild(tfoot);		t.setCommonStyleTable(table_address,th_header,"#E2E2E2");				container.appendChild(table_address);	}		t.resetTableAddress = function(div_locker){		container.removeChild(t.table_address);		t.setTableAddress();		if(typeof(div_locker) != "undefined" && div_locker != null) unlock_screen(div_locker);	}		t.addSetAddressButton = function(cont, host){		var div = document.createElement("div");		// var host = data.getHost();		if(host == null){			div.innerHTML = "<img src = '"+theme.icons_16.search+"' style ='vertical-align:bottom'/> Set a location";			div.className = "button";		}		if(host != null){			div.innerHTML = "<img src = '"+theme.icons_16.search+"'/> Change the location";			div.className = "button";		}		div.onclick = function(){			if(data.partners.length > 0 && organization_contacts.noAllAddressesEmpty()) t.setOrSelectPartnerAddressDialog(host);			else t.setAddressNoPartnerDialog(host);		};		cont.appendChild(div);	}		t.addRemoveAddressButton = function(cont){		var div = document.createElement("div");		div.innerHTML = "<img src = '"+theme.icons_16.remove+"'/> Unset location";		div.onmouseover = function(){div.innerHTML = "<img src = '"+theme.icons_16.remove_black+"'/> Unset location";};		div.onmouseout = function(){div.innerHTML = "<img src = '"+theme.icons_16.remove+"'/> Unset location";};		div.className = "button";		div.onclick = function(){			confirm_dialog("<center>Do you really want to unset <br/>the location of this Information Session?</center>",function(res){				if(res){					var div_locker = lock_screen();					t.removeAddress(div_locker);				}			});		};		cont.appendChild(div);	}		t.removeAddress = function(div_locker){		/* Reset data object */		data.address = null;		var host = data.getHost();		if(host != null && host.index != null){			data.partners[host.index].host = null;			data.partners[host.index].host_address = null;		}		/* Reset the table */		t.resetAll(div_locker);	}		t.setOrSelectPartnerAddressDialog = function(host){		var cont = document.createElement("div");		var cont_manually_set = document.createElement("div");		var pop = new popup_window("Set the location - 1/2",theme.icons_16.question,cont);				var set_address = "<img src = '"+theme.icons_16.search+"'/> Manually choose";		var select_address = "<img src = '"+theme.icons_16.edit+"'/> Select from partners";		cont.innerHTML = "<center>You can set a pre-selected address using the partners' ones <br/> <i>or</i> manually choose an other address</center> <br/><i>Note: if no address is set to one partner, this partner wont be displayed in the list</i>";		pop.addButton(set_address,"set_address_button",function(){			pop.close();			t.manuallySetStepTwo(cont_manually_set,host);		});		pop.addButton(select_address,"select_address_button",function(){			pop.close();			t.popSelectAddressFromPartner(host);		});		// if (host != null){			// cont.innerHTML = "<center>You can set a pre-selected address using the partners ones <br/> <i>or</i> manually choose an other address<br/><i>Note: If you go on next step, the current host will be unselected</i></center>";		// }				pop.show();	}		t.manuallySetStepTwo = function(cont_manually_set,host){		var pop_manually_set = new popup_window("Set the location - 2/2 - <i>Manually set the address</i>","/static/contact/address_16.png",cont_manually_set);		if(data.address == null || data.address == "null" || data.address == {}){			data.address = {};						data.address.id = -1;			data.address.country_id = null;			data.address.country_code = null;			data.address.area_id = null;			data.address.street_name = null;			data.address.street_number = null;			data.address.building = null;			data.address.unit = null;			data.address.additional = null;			data.address.address_type = null;		}			pop_manually_set.addOkCancelButtons(function(){			pop_manually_set.close();			var div_locker = lock_screen();			t.addAddressManually(host, div_locker);		});		new edit_address(cont_manually_set,data.address);		pop_manually_set.show();	}		t.addAddressManually = function(host, div_locker){		if(host != null && host.index != null){			//set the host attribute of the corresponding partner to null			data.partners[host.index].host = null;			data.partners[host.index].host_address = null;						//TODO: unselect the host partner		}		/* Reset the table */		t.resetAll(div_locker);	}		t.setAddressNoPartnerDialog = function(host){		var cont = document.createElement("div");		var pop = new popup_window("Set the location - 1/2",theme.icons_16.info,cont);		cont.innerHTML = "<center> This information session as no partner yet <br/> or no address is set to any partner, <br/> so you can only manually set the location</center>";		pop.addOkCancelButtons(function(){			var cont_manually_set = document.createElement("div");			pop.close();			t.manuallySetStepTwo(cont_manually_set,host);		});		pop.show();	}		t.popSelectAddressFromPartner = function(host){		var cont = document.createElement("div");		//var pop = new popup_window("Set the location - 2/2 - <i>Select from partners addresses</i>","/static/contact/address_16.png",cont);		var pop = new popup_window("Set the location - 2/2","/static/contact/address_16.png",cont);		var table_partners = document.createElement("table");		t.setTablePartnersAddresses(table_partners, pop);		cont.appendChild(table_partners);		pop.show();	}		t.setTablePartnersAddresses = function(table_partners, pop){		for(var i = 0; i < organization_contacts.length; i++){			if(typeof(organization_contacts[i].addresses[0]) != "undefined" && organization_contacts[i].addresses[0].id != null && organization_contacts[i].addresses[0].id != "null"){				var tr_header_table_partners = document.createElement("tr");				var th_table_partners = document.createElement("th");				var name = data.partners[data.findPartnerIndex(organization_contacts[i].id)].organization_name;				th_table_partners.innerHTML = name;				tr_header_table_partners.appendChild(th_table_partners);				table_partners.appendChild(tr_header_table_partners);				var table = document.createElement("table");				table.style.border = "1px solid";				table.style.width = "100%";				setBorderRadius(table,5,5,5,5,5,5,5,5);				table.style.borderColor = "#0F6CA2";				table.style.marginBottom = "15px";				var tr_partner = document.createElement("tr");				var td_partner = document.createElement("td");				td_partner.appendChild(table);				tr_partner.appendChild(td_partner);				for(var j = 0; j < organization_contacts[i].addresses.length; j++){					var tr = document.createElement("tr");					var td = document.createElement("td");					var text = new address_text(organization_contacts[i].addresses[j]);					td.onclick = function(){						var temp_this = this;						pop.close();						var div_locker = lock_screen();						/* Unset data.address */						data.address = null;						/* Change the host */						var host = data.getHost();						if(host != null && host.index != null){							data.partners[host.index].host = null;							data.partners[host.index].host_address = null;						}						var index = data.findPartnerIndex(temp_this.organization_id);						data.partners[index].host = true;						data.partners[index].host_address = temp_this.address_id;						/* Reset the table */						t.resetAll(div_locker);					};					td.address_id = organization_contacts[i].addresses[j].id;					td.organization_id = organization_contacts[i].id;					td.appendChild(text.element);					td.className = "button";					tr.appendChild(td);					table.appendChild(tr);														}				table_partners.appendChild(tr_partner);				pop.resize();							}		}	}		t.setTablePartners = function(){		t.table_partners = document.createElement("table");		var thead = document.createElement("thead");		var tbody = document.createElement("tbody");		var tfoot = document.createElement("tfoot");				th_head = document.createElement("th");		th_head.innerHTML = "<img src='/static/contact/directory_16.png' style = 'vertical-align:bottom'/> Partners";		t.setCommonStyleTable(t.table_partners,th_head,"#808080");		th_head.colSpan = 3;		thead.appendChild((document.createElement("tr")).appendChild(th_head));				if(data.partners.length == 0){			var text = document.createElement("div");			text.innerHTML = "No partner is set for this Information Session";			text.style.fontStyle = "italic";		}		if(data.partners.length > 0){			for(var i = 0; i < data.partners.length; i++){				t.addPartnerRows(i, tbody);			}		}		if(rights.manage){			t.addAddPartnerButton(tfoot);		}		if(rights.manage) t.addRemovePartnerButton();				t.table_partners.appendChild(thead);		t.table_partners.appendChild(tbody);		t.table_partners.appendChild(tfoot);		container.appendChild(t.table_partners);	}		t.addAddPartnerButton = function(cont){		var tr = document.createElement("tr");		var td = document.createElement("td");		var div = document.createElement("div");		var data_grid = document.createElement("div");		div.innerHTML = "<img src='"+theme.icons_16.add+"'/> Add a partner";		div.className = "button";		div.onclick = function(){			var pop = new popup_window("Select the partners",theme.icons_16.question,data_grid);			pop.setContentFrame("/dynamic/selection/page/select_organizations_for_IS?creator=Selection");			pop.show();			//TODO pre select the organizations already selected		};		td.appendChild(div);		td.colSpan = 3;		td.style.borderTop = "1px solid #959595";		tr.appendChild(td);		cont.appendChild(tr);	}		t.addManageContactPointsButton = function(cont, partner_index_in_data){		var div = document.createElement("div");		div.innerHTML = "<img src = '/static/contact/contact_16.png' /> Set/unset contacts points";		div.className = "button";		div.onclick = function(){			var pop_cont = document.createElement("div");			var pop = new popup_window("Select the contacts points",theme.icons_16.question,pop_cont);			var table = document.createElement("table");			table.contact_points_selected = [];			pop_cont.appendChild(table);			t.setTableSelectContactPoints(table,partner_index_in_data);			pop.addOkCancelButtons(function(){				pop.close();				var div_locker = lock_screen();				//update the data object				data.partners[partner_index_in_data].contact_points_selected = [];				var j = 0;				for(var i = 0; i < table.contact_points_selected.length; i++){					if(table.contact_points_selected[i].selected){						data.partners[partner_index_in_data].contact_points_selected[j] = table.contact_points_selected[i].people_id;						j++;					}				}				t.resetAll(div_locker);			});			pop.show();		};		cont.appendChild(div);	}		t.setTableSelectContactPoints = function(table, partner_index_in_data){		var index = partners_contacts_points.findPartnerIndex(data.partners[partner_index_in_data].organization);		if(index != null){			var length = partners_contacts_points[index].contact_points.length;			for(var j = 0; j < length; j++){				table.contact_points_selected[j] = {};				table.contact_points_selected[j].people_id = partners_contacts_points[index].contact_points[j].people_id;				table.contact_points_selected[j].selected = false;				var tr = document.createElement("tr");				var td1 = document.createElement("td");				var td2 = document.createElement("td");				td2.people_id = partners_contacts_points[index].contact_points[j].people_id;				td2.index = j;				if(j == 0){					td1.innerHTML = data.partners[partner_index_in_data].organization_name;					td1.style.fontSize = "large";					td1.style.fontWeight = "bold";					td1.style.paddingRight = "20px";				}				var text = "";				text += partners_contacts_points[index].contact_points[j].people_last_name;				text += ", "+ partners_contacts_points[index].contact_points[j].people_first_name;				if(partners_contacts_points[index].contact_points[j].people_designation != null && partners_contacts_points[index].contact_points[j].people_designation != "")					text += ", "+ partners_contacts_points[index].contact_points[j].people_designation;				td2.innerHTML = text;				td2.style.fontStyle = "italic";				td2.className = "button";				if(data.isContactPointSelected(partner_index_in_data, partners_contacts_points[index].contact_points[j].people_id)){					td2.style.backgroundColor = "rgb(17, 225, 45)";					table.contact_points_selected[j].selected = true;				}								td2.onclick = function(){					if(this.style.backgroundColor == "#11E12D" ||this.style.backgroundColor == "rgb(17, 225, 45)"){						this.style.backgroundColor = "#FFFFFF";						table.contact_points_selected[this.index].selected = false;					}					else if (this.style.backgroundColor == "" || this.style.backgroundColor == "rgb(255, 255, 255)"){						this.style.backgroundColor = "#11E12D";						table.contact_points_selected[this.index].selected = true;					}									};				tr.appendChild(td1);				tr.appendChild(td2);				table.appendChild(tr);			}			if(length == 0){				var td = document.createElement("td");				td.innerHTML = "This organization has no contact point";				td.style.fontStyle = "italic";				table.appendChild((document.createElement("tr")).appendChild(td));			}		}	}		t.addRemovePartnerButton = function(){			}		t.addPartnerRows = function(index, tbody){		var length = data.partners[index].contact_points_selected.length;		if(length == 0){			var tr = document.createElement("tr");			var td1 = document.createElement("td");			var td_contact = document.createElement("td");			t.setRowNoContactPointSelected(tr, td_contact, td1, index);			tr.appendChild(td_contact);			tbody.appendChild(tr);		} else {			for(var i = 0; i < length; i++){				var tr = document.createElement("tr");				var td1 = document.createElement("td");				var td_name = document.createElement("td");				td_name.style.paddingRight = "10px";				td_name.style.paddingLeft = "10px";				var td_contact = document.createElement("td");				td_contact.style.paddingTop = "10px";				td_contact.style.paddingBottom = "10px";				var text = document.createElement("div");				var contact_point = partners_contacts_points.getContactPointData(data.partners[index].organization, data.partners[index].contact_points_selected[i]);				if(contact_point != null){					td_contact.style.paddingRight = "5px";					if(contact_point.people_designation != null && contact_point.people_designation != "")						text.innerHTML = contact_point.people_last_name+", "+contact_point.people_first_name+", "+contact_point.people_designation;					if(contact_point.people_designation == null ||contact_point.people_designation == "")						text.innerHTML = contact_point.people_last_name+", "+contact_point.people_first_name;					text.style.fontStyle= "italic";					td_name.appendChild(text);					if(contact_point.contacts.length != 0)						new contacts(td_contact, null, null, null, contact_point.contacts, false, false, false, null);					else{						td_contact.innerHTML = "<i>There is no contact<br/> info for this people</i>";						td_contact.style.textAlign = "center";						td_contact.style.border = "1px solid #959595";						td_contact.style.marginTop = "10px";						td_contact.style.marginRight = "5px";						// td_contact.style.paddingRight = "";						setBorderRadius(td_contact, 5, 5, 5, 5, 5, 5, 5, 5);					}				} else t.setRowNoContactPointSelected(tr, td_contact, td1, index);								if(i == 0 && contact_point != null){					td1.innerHTML = data.partners[index].organization_name;					td1.style.fontSize = "large";					td1.style.fontWeight = "bold";					td1.rowSpan = length;					td1.style.paddingLeft = "10px";					td1.style.paddingRight = "15px";					tr.appendChild(td1);					if(index != 0){						td1.style.borderTop = "1px solid #959595";						td_name.style.borderTop = "1px solid #959595";						td_contact.style.borderTop = "1px solid #959595";					}				}				if(contact_point != null) tr.appendChild(td_name);				tr.appendChild(td_contact);				tbody.appendChild(tr);				//TODO add remove contact point button			}		}		//Add a row for the contacts points button		if(rights.manage){			var tr_button = document.createElement("tr");			var td1_button = document.createElement("td");			t.addManageContactPointsButton(td1_button,index);			tr_button.appendChild(td1_button);			tr_button.appendChild(document.createElement("td"));			tr_button.appendChild(document.createElement("td"));			tbody.appendChild(tr_button);		}	}		t.setRowNoContactPointSelected = function(tr, td_contact, td1, index){		td_contact.style.paddingTop = "20px";		td_contact.style.paddingBottom = "20px";		td_contact.innerHTML = "<center>There is no contact point selected for this partner</center>";		td_contact.style.fontStyle = "italic";		td_contact.colSpan = 2;		td1.innerHTML = data.partners[index].organization_name;		td1.style.fontSize = "large";		td1.style.fontWeight = "bold";		td1.style.paddingLeft = "10px";		td1.style.paddingRight = "15px";		tr.appendChild(td1);		if(index != 0){			td1.style.borderTop = "1px solid #959595";			td_contact.style.borderTop = "1px solid #959595";		}	}		t.resetTablePartners = function(div_locker){		container.removeChild(t.table_partners);		t.setTablePartners();		if(typeof(div_locker) != "undefined" && div_locker != null) unlock_screen(div_locker);	}		t.setCommonStyleTable = function(table,th_header, thead_color){		table.style.borderSpacing = "0";		table.style.marginLeft = "5px";		table.style.marginBottom = "3px";		setBorderRadius(table, 5, 5, 5, 5, 5, 5, 5, 5);		table.style.border = "1px solid";		th_header.style.textAlign = "left";		th_header.style.padding = "2px 5px 2px 5px";		th_header.style.backgroundColor = thead_color;		th_header.style.width = "100%";		setBorderRadius(th_header, 5, 5, 5, 5, 0, 0, 0, 0);	}		config.findIndex = function(name){		var index = null;		for(var i = 0; i < config.length; i++){			if(config[i].name == name){				index = i;				break;			}		}		return index;	}		data.findPartnerIndex = function(organization_id){		var index = null;		for(var i = 0; i < data.partners.length; i++){			if(data.partners[i].organization == organization_id){				index = i;				break;			}		}		return index;	}		/**	 * @method #IS_profile#getHost	 * @return {host} if no host nor postal_address is set, host = null	 * Else if address == null but one host is set as true, host.id = the id of the host address, host.index = the index in the data.partners array	 * Else if address != null, host.id = the id of the postal_address, host.index = null	 */	data.getHost = function(){		var host = {};		if(data.address != null && data.address != {}){			host.id = data.address.id;			host.index = null;		} else if (data.address == null){			var found = false;			for(var i = 0; i < data.partners.length; i++){				if(data.partners[i].host == true && data.partners[i].host_address != null){					host.index = i;					host.id = data.partners[i].host_address;					found = true;					break;				}			}			if(!found) host = null;		}		return host;	}		data.isContactPointSelected = function(partner_index, contact_point_id){		var selected = false;		for(var i = 0; i < data.partners[partner_index].contact_points_selected.length; i++){			if(data.partners[partner_index].contact_points_selected[i] == contact_point_id){				selected = true;				break;			}		}		return selected;	}		organization_contacts.noAllAddressesEmpty = function(){		var not_empty = false;		for(var i = 0; i < organization_contacts.length; i++){			if(organization_contacts[i].addresses.length > 0){				for(var j = 0; j < organization_contacts[i].addresses.length; j++){					if(typeof(organization_contacts[i].addresses[j]) != "undefined" && organization_contacts[i].addresses[j].id != null && organization_contacts[i].addresses[j].id != "" && organization_contacts[i].addresses[j].id != "null"){						not_empty = true;						break;					}				}				if(not_empty) break;			}		}		return not_empty;	}		organization_contacts.getAddressFromPartnerAndAddressId = function(partner_id, address_id){		var address = null;		var index = null;		for(var i = 0; i < organization_contacts.length; i++){			if(organization_contacts[i].id == partner_id){				index = i;				break;			}		}		if(index != null){			for(var j = 0; j < organization_contacts[i].addresses.length; j++){				if(organization_contacts[i].addresses[j].id == address_id){					address = organization_contacts[i].addresses[j];					break;				}			}		}		return address;	}		partners_contacts_points.getContactPointData = function(partner_id, contact_point_id){		var contact_point = null;		var partner_index = partners_contacts_points.findPartnerIndex(partner_id);		if(partner_index != null){			for(var i = 0; i < partners_contacts_points[partner_index].contact_points.length; i++){				if(partners_contacts_points[partner_index].contact_points[i].people_id == contact_point_id){					contact_point = partners_contacts_points[partner_index].contact_points[i];					break;				}			}		}		return contact_point;	}		partners_contacts_points.findPartnerIndex = function(partner_id){		var index = null;		for(var i = 0; i < partners_contacts_points.length; i++){			if(partner_id == partners_contacts_points[i].organization){				index = i;				break;			}		}		return index;	}		//TODO: before saving, check that at least one field is not empty in the data object!!	/*TODO:		saving must erase the data in database for IS and set it again		Has what is displayed and set when managed by the user is based on partners_contacts_points & organization_contacts		objects, which represent what is REALLY set into the database				==> relevant???	*/		everything_ready = function(){		if(required == 4) t.init();	}}