function IS_profile(id, config, calendar_id, rights, container, data, organization_contacts,partners_contacts_points,all_duration){	var t = this;	t.table = document.createElement("table");	t.div_header = document.createElement("div");	t.div_address = document.createElement("div");	t.div_partners = document.createElement("div");	t.div_date = document.createElement("div");	t.div_name = document.createElement("div");	t.div_statistics = document.createElement("div");		if(typeof(container) == "string") container = document.getElementById(container);	require(["popup_window.js","select_address.js","select_partners.js","IS_date.js","IS_name.js","IS_statistics.js"],function(){t._init();});	t._init = function(){		if((id == -1 && !rights.manage) || (id == "-1" && !rights.manage)) error_dialog("You are not allowed to add an Information Session");		else{			t._setHeader();			t._setTableAddress();			t._setTablePartners();			t._setTableDate();			var index_name = config.findIndex("give_name_to_IS");			if(config[index_name].value) t._setTableName();			t._setTableStatistics();			t._setLayout();		}	}		// t.resetAll = function(div_locker){		// t.resetTableAddress(div_locker);		// setTimeout(t.re_setTablePartners(div_locker),100);			// }		t._setHeader = function(){		t.div_header.innerHTML = "<center>Information Session Profile</center>";		t.div_header.style.fontWeight = "bold";		t.div_header.style.fontSize = "x-large";		t.div_header.style.paddingTop = "20px";		t.div_header.style.paddingBottom = "40px";	}		t._setTableAddress = function(){		t.select_address = new select_address(t.div_address, data, organization_contacts, rights.manage);	}		t._setTablePartners = function(){		t.select_partners = new select_partners(t.div_partners, id, data.partners, rights.manage, organization_contacts, partners_contacts_points, t.select_address);	}		t._setTableDate = function(){		var index = config.findIndex("default_duration_IS");		// var index2 = config.findIndex("give_name_to_IS_event");		t.IS_date = new IS_date(t.div_date, data.date, data.id, calendar_id, config[index].value, rights.read, rights.manage, all_duration);	}		t._setTableName = function(){		t.IS_name = new IS_name(t.div_name,data.name,rights.manage)	}		t._setTableStatistics = function(){		var index_statistics = config.findIndex("separate_boys_girls_IS"); 		t.IS_statistics = new IS_statistics(t.div_statistics, config[index_statistics].value, rights.manage, data.number_boys_expected, data.number_boys_real, data.number_girls_expected, data.number_girls_real);	}		t._setLayout = function(){		var tr1 = document.createElement("tr");		var tr2 = document.createElement("tr");		var tr3 = document.createElement("tr");		var tr4 = document.createElement("tr");		var tr5 = document.createElement("tr");		var tr6 = document.createElement("tr");		var td1 = document.createElement("td");				td1.appendChild(t.div_header);		td1.colSpan = 2;		tr1.appendChild(td1);				var td21 = document.createElement("td");		var td22 = document.createElement("td");		td21.appendChild(t.div_address);		td22.appendChild(t.div_partners);		td22.rowSpan = 5;		td22.style.verticalAlign = "top";		tr2.appendChild(td21);		tr2.appendChild(td22);				var td31 = document.createElement("td");		var td32 = document.createElement("td");		td31.appendChild(t.div_name);		td31.style.textAlign = "center";		tr3.appendChild(td31);		tr3.appendChild(td32);				var td41 = document.createElement("td");		var td42 = document.createElement("td");		td41.appendChild(t.div_date);		tr4.appendChild(td41);		tr4.appendChild(td42);				var td51 = document.createElement("td");		var td52 = document.createElement("td");		td51.appendChild(t.div_statistics);		td51.style.verticalAlign = "top";		tr5.appendChild(td51);		tr5.appendChild(td52);				var td61 = document.createElement("td");		// var td62 = document.createElement("td");		var button_remove = document.createElement("div");		button_remove.className = "button";		button_remove.innerHTML = "<img src = '"+theme.icons_16.remove+"' /> Remove Information Session";		button_remove.onmouseout = function(){			this.innerHTML = "<img src = '"+theme.icons_16.remove+"' /> Remove Information Session";		};		button_remove.onmouseover = function(){			this.innerHTML = "<img src = '"+theme.icons_16.remove_black+"' /> Remove Information Session";		};		button_remove.onclick = function(){			//TODO		};		if(rights.manage && id != -1 && id != "-1")			td61.appendChild(button_remove);		var button_save = document.createElement("div");		button_save.className = "button";		button_save.innerHTML = "<img src = '"+theme.icons_16.save+"' /> <b>Save</b>";		button_save.onclick = function(){			t.launchSaving();		};		if(rights.manage)			td61.appendChild(button_save);		tr6.appendChild(td61);		// tr6.appendChild(td62);				t.table.appendChild(tr1);		t.table.appendChild(tr2);		t.table.appendChild(tr3);		t.table.appendChild(tr4);		t.table.appendChild(tr5);		t.table.appendChild(tr6);				container.appendChild(t.table);	}		t.launchSaving = function(){		var locker = lock_screen();		var host = t.select_address.getHostInData();		if(host == null){			unlock_screen(locker);			error_dialog("Location field is mandatory");		} else {							/** 			 * Get the data from each screen:			 * select_partners works with the reference of data			 * so there is no need to update			 */						//get from select_address			var address = t.select_address.getAddressObject();			if(address.geographic_area == null || (typeof(address.geographic_area.id) != "undefined" && address.geographic_area.id == null)){				unlock_screen(locker);				error_dialog("Please select a geographic area in the Location field");			} else {				//get from date				var event = t.IS_date.getEvent();				event.title = address.geographic_area.text;								// get from statistics				var figures = t.IS_statistics.getFigures();				data.number_boys_expected = figures.boys_expected;				data.number_girls_expected = figures.girls_expected;				data.number_boys_real = figures.boys_real;				data.number_girls_real = figures.girls_real;								// get from name				var name = t.IS_name.getName();				data.name = name;								var save_event;				var save_address;				//Check if we have to call the save_event service				if(typeof(event.start) == "undefined" || (typeof(event.start) != "undefined" && (event.start == null || event.start == "")))					save_event = false;				else					save_event = true;									//Check if we have to call the save_address service				if(data.address != null)					save_address = true;				else					save_address = false;									if(save_event)					t.saveEvent(locker,address,save_address);				else{					data.date = null;					data.id = t.saveAddress(locker,address,save_address);				}			}		}			// alert(service.generate_input(data));			// alert(service.generate_input(t.select_address.getAddressObject()));			// alert(service.generate_input(organization_contacts));	}		t.saveEvent = function(locker,address,save_address){		var create_event		if(event.id == -1 || event.id == "-1"){			delete event.id;			create_event = true;		} else create_event = false;		service.json("calendar","save_event",{event:event, calendar:calendar_id},function(res){			if(!res){				unlock_screen(locker);				error_dialog("An error occured, your informations were not saved");			} else {				if(create_event) data.date = res.id;				data.id = t.saveAddress(locker, address,save_address);			}		});	}		t.saveAddress = function(locker,address,save_address){		if(save_address){			//save the address			service.json("contact","save_address",{address:address},function(res){				if(!res){					unlock_screen(locker);					error_dialog("An error occured, your informations were not saved");				} else {					if(address.id == -1 || address.id == "-1")						data.address = res;					t.saveIS(locker);				}			});		} else 			t.saveIS(locker);	}		t.saveIS = function(locker){			}	config.findIndex = function(name){		var index = null;		for(var i = 0; i < config.length; i++){			if(config[i].name == name){				index = i;				break;			}		}		return index;	}		//TODO: before saving, check that one geographic area is set	//TODO: before saving, name the event title with the geographic_area selected	/*TODO:		saving must erase the data in database for IS and set it again		Has what is displayed and set when managed by the user is based on partners_contacts_points & organization_contacts		objects, which represent what is REALLY set into the database				==> relevant???	*/}