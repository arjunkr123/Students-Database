/* All the main selection methods */		/**	 * Find th e index of a config attribute into the config array	 * @param {Array} config	 * @param {String} name the name of the config attribute seeked	 * @returns {Number} the index found	 */findIndexInConfig = function(config, name){	var index = null;	for(var i = 0; i < config.length; i++){		if(config[i].name == name){			index = i;			break;		}	}	return index;};/** * Get the array containing the categories and their respective indexes for the config attributes * @returns {Array} [{index:, name:},...] */getConfigCategoryIndexes = function(){	var categories = [];	categories[0] = {index:1,name:"Information Session"};	categories[1] = {index:2,name:"Exam Subject"};	categories[2] = {index:3,name:"Applicant"};	categories[3] = {index:4,name:"Entrance Examination"};	return categories;};/** * Retrieve from the steps JSON array the step value from its name * @param {Array} steps * @param {String} name the name of the seeked step */getStepValue = function(steps,name){	for(var i = 0; i < steps.length; i++){		if(steps[i].name == name)			return steps[i].value;	}};/** * Export a list of applicants * This method creates a hidden form that refers to the applicant/export_list service * @param {String} format the exporting format * @param {String} file_name the exported file name * @param {String} title the title to set to the list * @param {Number | NULL} center_id The exam center ID if the aim is to export an exam center applicants list * @param {Number | NULL} room_id The exam center room ID if the aim is to export an exam center room applicants list * @param {Number | NULL} session_id The exam session ID if the aim is to export an exam session applicants list * @param {String} order_by Can be "name" or "applicant_id". By default, the data is ordered by name */export_applicant_list = function(format,file_name,title,center_id,session_id,room_id,order_by,field_null){	var form = document.createElement('form');	form.action = "/dynamic/selection/service/applicant/export_list";	form.method = "POST";	var input = document.createElement("input");	input.type = "hidden";	input.name = "format";	input.value = format;	form.appendChild(input);	var input2 = document.createElement("input");	input2.type = "hidden";	input2.value = title;	input2.name = "title";	form.appendChild(input2);	var input3 = document.createElement("input");	input3.type = "hidden";	input3.value = center_id;	input3.name = "center_id";	form.appendChild(input3);	var input4 = document.createElement("input");	input4.type = "hidden";	input4.value = room_id;	input4.name = "room_id";	form.appendChild(input4);	var input5 = document.createElement("input");	input5.type = "hidden";	input5.value = session_id;	input5.name = "session_id";	form.appendChild(input5);	var input6 = document.createElement("input");	input6.type = "hidden";	input6.value = order_by;	input6.name = "order_by";	form.appendChild(input6);	if(field_null){		var input7 = document.createElement("input");		input7.type = "hidden";		input7.value = field_null;		input7.name = "field_null";		form.appendChild(input7);	}	var input8 = document.createElement("input");	input8.type = "hidden";	input8.value = file_name;	input8.name = "file_name";	form.appendChild(input8);		var input9 = document.createElement("input");	input9.type = "hidden"; //File name can be set by the server using date objects: must balance the jetlag	var d = new Date();	input9.value = d.getTimezoneOffset();	input9.name = "time_offset";	form.appendChild(input9);	document.body.appendChild(form);	form.submit();};/** * Get an exam session name from its CalendarEvent object * @param {CalendarEvent} event * @returns {String} */get_exam_session_name_from_event = function(event){	var name = "";	var start = new Date(event.start*1000);//Convert timestamp into ms	var end = new Date(event.end*1000);//Convert timestamp into ms	var date = dateToSQL(start);	var field_time_start = new field_time(start.getHours()+":"+start.getMinutes(),false);	var field_time_end = new field_time(end.getHours()+":"+end.getMinutes(),false);	var start_element = field_time_start.getHTMLElement();	start_element = start_element.firstChild.nodeValue;	var end_element = field_time_end.getHTMLElement();	end_element = end_element.firstChild.nodeValue;	name += date+" ("+start_element+" to "+end_element+")";	return name;};/** * Get the a string containing the main data for a given applicant (applicant_id, first / middle / last name, sex, date of birth) * @param {Applicant} * @returns {String} */getApplicantMainDataDisplay = function(applicant){	var text = "";	text += applicant.applicant_id+", "+applicant.last_name.uniformFirstLetterCapitalized();	if(typeof applicant.middle_name == "string" && applicant.middle_name.checkVisible())		text +=", "+applicant.middle_name.uniformFirstLetterCapitalized();	text += ", "+applicant.first_name.uniformFirstLetterCapitalized();	if(typeof applicant.sex == "string" && applicant.sex.checkVisible())		text += ", "+applicant.sex;	if(typeof applicant.birthdate == "string" && applicant.birthdate.checkVisible())		text +=", "+applicant.birthdate;	return text;};