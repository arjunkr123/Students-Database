function manage_exam_subject(subject, container, can_edit, can_remove, can_add, display_correct_answer,display_choices,allowed_by_steps,restriction_text){	var t = this;	t.ordered = null;	t.allReseters = [];	t.table = document.createElement("table");	require(["manage_exam_subject_part_questions.js","popup_window.js"],function(){		if(!allowed_by_steps)			error_dialog(restriction_text);		t._init();	});		t._init = function(){		t._setTableHeader();		t._setTableBody();		if(can_edit)			t._setTableFooter();		t._setTableStyle();		container.appendChild(t.table);	}		t._setTableHeader = function(){		var thead = document.createElement("thead");		t.th_head = document.createElement("th");		t.th_head.colSpan = 2;		t._setThHeaderContent();		t.table.appendChild(thead.appendChild((document.createElement("tr")).appendChild(t.th_head)));	}		t._setThHeaderContent = function(){		var max_score = 0;		for (var i = 0; i < subject.parts.length; i++){			var score = subject.parts[i].max_score;			if(typeof(score) == "string")				score = parseFloat(score);			if(isNaN(score))				score = 0;			max_score = max_score + score;		}		t.th_head.innerHTML ="<div style = 'font-size:x-large'>"+subject.name.uniformFirstLetterCapitalized()+"</div></br> "+subject.parts.length+" "+getGoodSpelling("part",subject.parts.length)+ " - Max score: "+max_score+" "+getGoodSpelling("point",max_score);		//update subject object		subject.max_score = max_score;	}		t._setTableBody = function(){		var tbody = document.createElement("tbody");		if(subject.parts.length == 0){			t.ordered = [];			var td = document.createElement("td");			td.innerHTML = "This exam subject has no part yet";			td.style.paddingTop = "25px";			var td_insert = document.createElement("td");			td_insert.appendChild(t._createInsertPartButton());			var tr = document.createElement("tr");			tr.appendChild(td);			tr.appendChild(td_insert);			tbody.appendChild(tr);					} else {			t.ordered = t._getOrderedParts();			for(var i = 0; i < subject.parts.length; i++){				var tr1 = document.createElement("tr");				var tr2 = document.createElement("tr");				var td11 = document.createElement("td");				var td12 = document.createElement("td");				td12.style.paddingTop = "25px";				var td21 = document.createElement("td");				var td22 = document.createElement("td");				var show_button = t._createButton("hide_detail");				show_button.td = td12;				td11.appendChild(show_button);				td11.style.verticalAlign = "top";				show_button.index = i;				show_button.onclick = function(){					var t2 = this;					if(this.part.getDisplayQuestionDetail()){						delete this.part;						this.td.removeChild(this.div_part);						delete this.div_part;						this.div_part = document.createElement("div");						this.part = new manage_exam_subject_part_questions(							subject.parts[t.ordered[t2.index]],							t2.div_part,							can_edit, //if the user can edit a subject, he can remove/add questions							can_edit,							can_edit,							false,							display_correct_answer,							display_choices,							t._getQuestionsBefore(t2.index)						);						this.part.onmanagerow.add_listener(t.resetPartsAndHeader);						this.part.onupdatescore.add_listener(t._setThHeaderContent);						this.td.appendChild(t2.div_part);						this.innerHTML = "<img src = '/static/widgets/tree/plus.png'/>";					} else {						delete this.part;						this.td.removeChild(this.div_part);						delete this.div_part;						this.div_part = document.createElement("div");						this.part = new manage_exam_subject_part_questions(							subject.parts[t.ordered[t2.index]],							t2.div_part,							can_edit,							can_edit,							can_edit,							true,							display_correct_answer,							display_choices,							t._getQuestionsBefore(t2.index)						);						this.part.onmanagerow.add_listener(t.resetPartsAndHeader);						this.part.onupdatescore.add_listener(t._setThHeaderContent);						this.td.appendChild(t2.div_part);						this.innerHTML = "<img src = '/static/widgets/tree/minus.png'/>";					}					// update the reseter					t.allReseters[this.index] = this.part.reset;				};				show_button.div_part = document.createElement("div");				show_button.part = new manage_exam_subject_part_questions(					subject.parts[t.ordered[i]],					show_button.div_part,					can_edit,					can_edit,					can_edit,					true,					display_correct_answer,					display_choices,					t._getQuestionsBefore(i)				);				t.allReseters[i] = show_button.part.reset;				show_button.part.onmanagerow.add_listener(t.resetPartsAndHeader);				show_button.part.onupdatescore.add_listener(t._setThHeaderContent);				td12.appendChild(show_button.div_part);				var remove_button = t._createButton("remove");				var rename_button = t._createButton("rename");				var index_button = t._createButton("change_index");				remove_button.index_in_parts = t.ordered[i];				remove_button.onclick = function(){					var t2 = this;					var pop = new popup_window("Remove a part",theme.icons_16.question,"<center>Do you really want to remove this part<br/> and <b>all</b> the questions inside?</center>");					pop.addOkCancelButtons(function(){						t._removePart(t2.index_in_parts);						pop.close();					});					pop.show();				};				rename_button.index = i;				rename_button.onclick = function(){					var t2 = this;					new input_dialog(						theme.icons_16.question,						"Set the part name",						"Enter the new name",						null,						255,						function(input){							if(!input.checkVisible())								return("You must enter at least one visible caracter");							else								return;						},						function(name){							if(name != null){								subject.parts[t.ordered[t2.index]].name = name.uniformFirstLetterCapitalized();								t.allReseters[t2.index]();							}						}					);				};				index_button.index_in_parts = t.ordered[i];				index_button.onclick = function(){					var t2 = this;					var div = document.createElement("div");					var pop = new popup_window(								"Set the index",								theme.icons_16.question,								div							);					for(var j = 0; j < t.ordered.length; j++){						var b = t._createButton(j+1);						if(subject.parts[t2.index_in_parts].index == j+1)							b.style.backgroundColor = "rgb(17, 225, 45)";						b.index = j+1;						b.onclick = function(){							t._setIndex(t2.index_in_parts, this.index);							pop.close();						};						div.appendChild(b);					}					pop.show();				};				if(can_edit){					td22.appendChild(rename_button);					td22.appendChild(index_button);					td22.appendChild(remove_button);				}				tr1.appendChild(td11);				tr1.appendChild(td12);				tr2.appendChild(td21);				tr2.appendChild(td22);				tbody.appendChild(tr1);				tbody.appendChild(tr2);								if(i == subject.parts.length - 1 && can_edit){					var td_insert_part = document.createElement("td");					td_insert_part.colSpan = 2;					td_insert_part.style.paddingTop = "15px";					var tr_insert_part = document.createElement("tr");					td_insert_part.appendChild(t._createInsertPartButton());					tr_insert_part.appendChild(td_insert_part);					tbody.appendChild(tr_insert_part);				}			}		}		t.table.appendChild(tbody);	}		t._setIndex = function(index_in_parts, new_index_attribute){		var actual_index_attribute = parseInt(subject.parts[index_in_parts].index);		if(actual_index_attribute > new_index_attribute){			//increase the indexes before			for(var i = new_index_attribute; i < actual_index_attribute; i++)				subject.parts[t.ordered[i-1]].index = parseInt(subject.parts[t.ordered[i-1]].index) + 1;			//set the new value			subject.parts[t.ordered[actual_index_attribute-1]].index = new_index_attribute;			//reset			t.reset();		} else if(actual_index_attribute < new_index_attribute){			//decrease the ones after			var temp = parseInt(new_index_attribute) +1;			for(var i = actual_index_attribute +1; i < temp; i++)				subject.parts[t.ordered[i-1]].index = parseInt(subject.parts[t.ordered[i-1]].index) -1;			//set the new value			subject.parts[t.ordered[actual_index_attribute-1]].index = new_index_attribute;			//reset			t.reset();		}		// if actual_index_attribute == new_index_attribute, nothing to do	}		t._removePart = function(index_in_parts){		//update the index attribute of the following parts		t._decreaseIndexAttribute(parseInt(subject.parts[index_in_parts].index) -1);		//remove the part		subject.parts.splice(index_in_parts,1);		//reset table		t.reset();	}		t._decreaseIndexAttribute = function(index_in_ordered){		if(typeof(index_in_ordered != "number"))			index_in_ordered = parseInt(index_in_ordered);		//if last part, nothing to do		if(index_in_ordered != t.ordered.length -1){			var j = index_in_ordered;			i = 1;			while(j != t.ordered.length){				subject.parts[t.ordered[index_in_ordered + i]].index = parseInt(subject.parts[t.ordered[index_in_ordered + i]].index) -1;				i++;				j = index_in_ordered + i;			}		}	}		t._createInsertPartButton = function(){		var insert_part = t._createButton("insert_part");		insert_part.onclick = function(){			// insert a part in subject			var length = subject.parts.length;			subject.parts[length] = {};			subject.parts[length].id = -1;			subject.parts[length].index = t.ordered.length +1;			subject.parts[length].name = "";			subject.parts[length].max_score = 0;			subject.parts[length].questions = [];			// reset			t.reset();		};		return insert_part;	}		t._setTableStyle = function(){		t.table.style.marginLeft = "10px";		t.table.style.marginTop = "10px";		t.table.style.marginBottom = "5px";		setBorderRadius(t.table, 5, 5, 5, 5, 5, 5, 5, 5);		t.table.style.border = "1px solid";	}		t._setTableFooter = function(){		var tfoot = document.createElement("tfoot");		var td = document.createElement("td");		td.colSpan = 2;		td.style.borderTop = "1px solid #808080";		rename_button = t._createButton("<img src='"+theme.icons_16.edit+"'/> Rename exam");		rename_button.onclick = function(){			locker = lock_screen();			var all_subject_names = null;			//Get all the existing exam names			service.json("selection","get_all_exam_subject_names",{},function(res){				unlock_screen(locker);				if(!res){					error_dialog("This functionality is not available for the moment");					all_subject_names = false;				} else					all_subject_names = res;			});			if(all_subject_names !== false){				new input_dialog(					theme.icons_16.question,					"Rename the exam subject",					"Enter the new name",					"",					255,					function(text){						if(!text.checkVisible())							return "You must enter at least one visible caracter";						else {							if(t._nameDoesNotAlreadyExist(text, all_subject_names))								return;							else								return "An exam subject already exists with the same name";						}					},					function(text){						if(text != null){							subject.name = text.uniformFirstLetterCapitalized();							t._setThHeaderContent();						}					}				);			}		};		if(can_edit)			td.appendChild(rename_button);		remove_button = t._createButton("remove_exam");		remove_button.onclick = function(){			new confirm_dialog("<center>Do you want to remove this exam,<br/> and all the informations related? (Questions, parts...)</center>",				function(answer){					if(answer){						var locker = lock_screen();						if(subject.id != -1 && subject.id != "-1")							// remove from database							service.json("selection","remove_exam",{id:subject.id},function(res){								unlock_screen(locker);								if(!res)									error_dialog("An error occured");								else									location.assign("/dynamic/selection/page/selection_main_page");							});						else							location.assign("/dynamic/selection/page/selection_main_page");					}				}			);		};		save_button = t._createButton("save");		save_button.onclick = function(){			locker = lock_screen();			//Check no question is empty			var no_empty_question = t._noEmptyQuestion();			var name_updated = true;			if(subject.name.uniformFirstLetterCapitalized() == "New Exam")				name_updated = false;			if(no_empty_question[0] && name_updated){				service.json("selection","save_exam",{exam:subject},function(res){					unlock_screen(locker);					if(!res)						error_dialog("An error occured, your informations were not saved");					else {						//update subject						subject = res;						//reset						t.reset();						var pop = new popup_window("Saved!",theme.icons_16.info,"Your informations have been succesfully saved!");						pop.show();					}				});			} else {				unlock_screen(locker);				if(!no_empty_question[0])					error_dialog(no_empty_question[1]);				if(!name_updated)					error_dialog("You must set an exam name");			}		};		if(can_edit){			if(can_add || (subject.id != -1 && subject.id != "-1"))				td.appendChild(save_button);		}		if(can_remove)			td.appendChild(remove_button);		//dev		// var alert_button = t._createButton("Alert subject");		// alert_button.onclick = function(){			// alert(service.generate_input(subject));		// }		// td.appendChild(alert_button);		t.table.appendChild(tfoot.appendChild((document.createElement("tr")).appendChild(td)));	}		t._nameDoesNotAlreadyExist = function(name, all_subject_names){		var unique = true;		var name2 = null;		if(name != "" && name != null){				name2 = name.uniformFirstLetterCapitalized();			for(var i = 0; i < all_subject_names.length; i++){				if(name2 == all_subject_names[i].uniformFirstLetterCapitalized()){					unique = false;					break;				}			}		}		return unique;	}		/**	 * Check that each question object has at least a score <> null	 */	t._noEmptyQuestion = function(){		var no_empty = true;		var error_message = "";		var res = [];		var first_error = true;		for(var i = 0; i < subject.parts.length; i++){			for(var j = 0; j < subject.parts[i].questions.length; j++){				if(subject.parts[i].questions[j].max_score == null || subject.parts[i].questions[j].max_score == "" || parseFloat(subject.parts[i].questions[j].max_score) <= 0.00){					no_empty = false;					if(first_error)						error_message += "You have not set a score (<b>number > 0</b>) to the following questions:<br/><ul>";					first_error = false;					error_message += "<li>Part "+subject.parts[i].index+", question "+subject.parts[i].questions[j].index+"</li>";				}			}		}		if(!no_empty)			error_message += "</ul><br/><center><i>The score field is mandatory</i></center>";		res[0] = no_empty;		res[1] = error_message;		return res;	}		t._getQuestionsBefore = function(index_in_ordered){		var questions_before = null;		if(index_in_ordered == 0)			questions_before = 0;		else {			for(var i = 0; i < index_in_ordered; i++){				var count = subject.parts[t.ordered[i]].questions.length;				if(isNaN(count))					count = parseInt(count);				questions_before = questions_before + count;			}		}		return questions_before;	}		t._getOrderedParts = function(){		var ordered = [];		for(var i = 1; i < subject.parts.length + 1; i++){			ordered[i-1] = t._getPartIndexInSubject(i);		}		return ordered;	}		t._getPartIndexInSubject = function(part_index_attribute){		var index = null;		for(var i = 0; i < subject.parts.length; i++){			if(subject.parts[i].index == part_index_attribute){				index = i;				break;			}		}		return index;	}		t._createButton = function(content){		var button = document.createElement("div");		button.className = "button";		if(content == "show_detail")			button.innerHTML = "<img src = '/static/widgets/tree/plus.png'/>";		else if(content == "hide_detail")			button.innerHTML = "<img src = '/static/widgets/tree/minus.png'/>";		else if(content == "remove"){			button.innerHTML = "<img src = '"+theme.icons_16.remove+"'/>";			// button.onmouseover = function(){				// this.innerHTML = "<img src = '"+theme.icons_16.remove_black+"'/>";			// };			// button.onmouseout = function(){				// this.innerHTML = "<img src = '"+theme.icons_16.remove+"'/>";			// };		}		else if(content == "rename")			button.innerHTML = "<img src = '"+theme.icons_16.edit+"'/> Rename";		else if(content == "change_index")			button.innerHTML = "Set index";		else if(content == "insert_part")			button.innerHTML = "<img src = '"+theme.icons_16.add+"'/> Add a part";		else if(content == "remove_exam"){			button.innerHTML = "<img src = '"+theme.icons_16.remove+"'/> Remove exam";			button.onmouseover = function(){				this.innerHTML = "<img src = '"+theme.icons_16.remove_black+"'/> Remove exam";			};			button.onmouseout = function(){				this.innerHTML = "<img src = '"+theme.icons_16.remove+"'/> Remove exam";			};		}		else if(content == "save")			button.innerHTML = "<img src = '"+theme.icons_16.save+"'/> Save";		else			button.innerHTML = content;		return button;	}		t._getPartIndexFromNumberOfQuestionsBefore = function(question_index_before_part){		var number_questions = 0;		var part_index = 0;		if(question_index_before_part == 0)			part_index = 0;		else {			while(number_questions < question_index_before_part && part_index < t.ordered.length){				number_questions = number_questions + parseFloat(subject.parts[t.ordered[part_index]].questions.length);				part_index++;			}		}		return part_index;	};		t.resetPartsAndHeader = function(question_index_before_part){		if(typeof(question_index_before_part) != "undefined" && subject.parts.length > 0)			var start = t._getPartIndexFromNumberOfQuestionsBefore(question_index_before_part);		t._setThHeaderContent();		if(typeof(start) == "undefined")			var start = 0;		//launch reset only for the parts after the one that fired onmanagerow		for(var i = start; i < t.ordered.length; i++){			t.allReseters[i](t._getQuestionsBefore(i));		}	}		t.reset = function(){		for(var i = 0; i < t.allReseters.length; i++)			t.allReseters[i]();		container.removeChild(t.table);		delete t.table;		t.table = document.createElement("table");		delete t.ordered;		t.ordered = null;		t._init();	}//TODO before saving: check there is no empty question}