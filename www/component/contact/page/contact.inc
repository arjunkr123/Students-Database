<?php /** * The rights of the user is taken into account to set this page * This page needs no service to be generated * @param $page {Page} the page in which this screen is included * @param $type {string} can be 'people' or 'organization' * @param $id the people_id or organization_id or -1 for new people/organization * @return string the name of the javascript constructor to call */ function contact(&$page,$type,$container_id,$id){	require_once("component/data_model/Model.inc");	$rights = array();	$fct_name = "create_contact_screen_".$page->generate_id();		$table_contact = null;	$join_contact_column = null;	$join_value = $id;	if($type == "people"){		$table_contact = "People_contact";		$join_contact_column = "people";		$rights['remove'] = DataModel::get()->getTable("People_contact")->canRemove();		$rights['edit'] = DataModel::get()->getTable("People_contact")->canModifyField('contact');		$rights['add'] = DataModel::get()->getTable("People_contact")->canAdd();	}	if($type == "organization"){		$table_contact = "Organization_contact";		$join_contact_column = "organization";		$rights['remove'] = DataModel::get()->getTable("Organization_contact")->canRemove();		$rights['edit'] = DataModel::get()->getTable("Organization_contact")->canModifyField('contact');		$rights['add'] = DataModel::get()->getTable("Organization_contact")->canAdd();	}		if($id <> -1){		$q_contacts = SQLQuery::create()->select($table_contact)						->field("Contact","id","contact_id")						->field("Contact","type","contact_type")						->field("Contact","contact","contact")						->field("Contact","sub_type","contact_sub_type")						->join($table_contact,"Contact",array("contact"=>"id"))						->where($table_contact.".".$join_contact_column." = '".SQLQuery::escape($join_value)."'")						->order_by("contact_type");		$contacts = $q_contacts->execute();	}	?>	<script type='text/javascript'>	function <?php echo $fct_name; ?>(onready){		/**		 * Generate the result object that contains all the info about the contact		 * result = {id:, contacts:[{contact_id: ,contact_type: ,contact: ,contact_sub_type:}]}		 * id is the one of the people or the organization		 * if no contact, contacts = []		 */		this.result = <?php		echo "{id:".$id.", contacts: [";		if ($id <> -1) {			$first = true;			foreach($contacts as $contact){				if(!$first) echo ", ";				$first = false;				echo "{";				echo "contact_id:".json_encode($contact["contact_id"]);				echo ", contact_type:".json_encode($contact["contact_type"]);				echo ", contact:".json_encode($contact["contact"]);				echo ", contact_sub_type:".json_encode($contact["contact_sub_type"]);				echo "}";			}		}		echo "]};";		?>		var t=this;		var editable = null;		var everything_ready = function(){			t.createTableContact();			if (onready) onready(t);		};		/**		 * {object} rights contains the edit, remove and add rights of the current user		 */		var rights = {};		rights.remove = <?php echo $rights['remove'];?>;		rights.edit = <?php echo $rights['edit'];?>;		rights.add = <?php echo $rights['add'];?>;		/**		* Set the result object.		*/		this.setResult = function(result) {			t.result = result;			while (t.email.childNodes.length > 0) t.email.removeChild(t.email.childNodes[0]);			while (t.phone.childNodes.length > 0) t.phone.removeChild(t.phone.childNodes[0]);			while (t.im.childNodes.length > 0) t.im.removeChild(t.im.childNodes[0]);			for(var i = 0; i < result.contacts.length; i++)				switch (result.contacts[i].contact_type) {				case "email": t.addRow(result.contacts[i], t.email); break;				case "phone": t.addRow(result.contacts[i], t.phone); break;				case "IM": t.addRow(result.contacts[i], t.im); break;				}		};				/**		 * @method createTableContact		 * Starts creating the different elements of the table contact (email, phone & instant message)		 * If No contact in result and the user is not allowed to add contacts, "There is no contact information" is displayed		 */		this.createTableContact = function(){			var container = document.getElementById("<?php echo $container_id;?>");			if(!rights.add && typeof(this.result.contacts[0]) == 'undefined'){				var div = document.createElement("div");				div.innerHTML = "There is no contact information";				container.appendChild(div);			}			else{				var main_container = document.createElement("DIV");				main_container.style.display = 'inline-block';				container.appendChild(main_container);				this.createElementTableContact(main_container, "email", "Email");				this.createElementTableContact(main_container, "phone", "Phone");				this.createElementTableContact(main_container, "IM", "Instant Messaging");			}		};				/**		 * @method createElementTableContact		 * Create the table containing all the contacts for the given category		 * A distinction is done according to the rights of the user		 * @param container		 * @param contact_type {string} can be "email", "phone" or "IM"		 * @param contact_type_name {string} the text displayed in the header of the table		 */		this.createElementTableContact = function(container, contact_type, contact_type_name){			var colorBorder = "#000000", colorBg = "#D0D0D0";			switch (contact_type) {			case "email": colorBorder = "#304060"; colorBg = "#D8D8F0"; break;			case "phone": colorBorder = "#3080b8"; colorBg = "#D0E0FF"; break;			case "IM": colorBorder = "#70a840"; colorBg = "#D8F0D8"; break;			}			var table = document.createElement("table");			table.style.emptyCells = "show";			var colgroup = document.createElement("colgroup");			table.appendChild(colgroup);			var col1 = document.createElement("COL"); colgroup.appendChild(col1);			var col2 = document.createElement("COL"); colgroup.appendChild(col2);			if (this.col1_width) col1.style.width = this.col1_width+"px";			table.style.border = "1px solid "+colorBorder;			table.style.width = "100%";			table.style.borderSpacing = "0";			table.style.marginBottom = "3px";			setBorderRadius(table, 5, 5, 5, 5, 5, 5, 5, 5);			var thead = document.createElement("thead");			var tbody = document.createElement("tbody");			var tfoot = document.createElement("tfoot");			var tr_head = document.createElement("tr");			var th_head = document.createElement("th");			th_head.colSpan = 2;			th_head.style.textAlign = "left";			th_head.style.padding = "2px 5px 2px 5px";			th_head.innerHTML = "<img src='/static/contact/"+contact_type+"_16.png' style='vertical-align:bottom;padding-right:3px'/>"+contact_type_name;			th_head.style.backgroundColor = colorBg;			setBorderRadius(th_head, 5, 5, 5, 5, 0, 0, 0, 0);			tr_head.appendChild(th_head);			thead.appendChild(tr_head);			table.appendChild(thead);			switch (contact_type) {			case "email": this.email = tbody; this.email_col1 = col1; this.email_col2 = col2; break;			case "phone": this.phone = tbody; this.phone_col1 = col1; this.phone_col2 = col2; break;			case "IM": this.im = tbody; this.im_col1 = col1; this.im_col2 = col2; break;			}			for(var i = 0; i < this.result.contacts.length; i++)				if (this.result.contacts[i].contact_type == contact_type)					this.addRow(this.result.contacts[i], tbody);			table.appendChild(tbody);			if(rights.add){				var td_foot_1 = document.createElement('td');				var td_foot_2 = document.createElement('td');				var tr_foot = document.createElement('tr');				//td_foot_1.style.borderRight = "1px solid #C0C0C0";				td_foot_1.style.paddingRight = "5px";				td_foot_2.innerHTML = "Add " + contact_type_name;				td_foot_2.style.cursor = 'pointer';				td_foot_2.style.fontStyle ='italic';				td_foot_2.style.color = "#808080";				td_foot_2.style.paddingLeft = '5px';				td_foot_2.contact_type = contact_type;				td_foot_2.contact_type_name = contact_type_name;				td_foot_2.onclick = function(){t.dialogAddField(this.contact_type, this.contact_type_name);};				tr_foot.appendChild(td_foot_1);				tr_foot.appendChild(td_foot_2);				tfoot.appendChild(tr_foot);				table.appendChild(tfoot);			}						container.appendChild(table);		};				/**		 * @method addRow		 * Create a row in the displayed table		 * @param contact the contact		 * @param tbody the reference to the tbody in which the row will be inserted		 */		this.addRow = function(contact, tbody){			var tr = document.createElement("tr");			tr.contact = contact;			var td_category = document.createElement("td");			td_category.style.textAlign = 'right';			td_category.style.paddingRight = '5px';			td_category.style.paddingLeft = '5px';			td_category.style.color = "#808080";			//td_category.style.borderRight = "1px solid #C0C0C0";			var td_data = document.createElement("td");			td_data.style.paddingLeft = '5px';			var div_data = document.createElement("div");			td_data.appendChild(div_data);			tr.appendChild(td_category);			tr.appendChild(td_data);			tbody.appendChild(tr);			var edit = null;			if (t.result.id == -1) {				// new				this.createCategoryField(td_category,contact);				var input = document.createElement("INPUT");				input.type = 'text';				input.maxLength = 100;				div_data.appendChild(input);				input.value = contact.contact;				input.onchange = function() {					contact.contact = input.value;				};				require("autoresize_input.js",function(){					var oc = input.onchange; 					autoresize_input(input,5);					var oc2 = input.onchange;					input.onchange = function() { oc2(); oc(); }				});			} else if(rights.edit){				/*Manage the category Field*/				this.createCategoryField(td_category,contact);				/*Manage the data field*/				var div = document.createElement("div");				div.style.display = 'inline-block';				edit = new editable_cell(div,"Contact","contact",contact.contact_id, 'field_text', {max_length:100}, contact.contact);				edit.contact = contact.contact;				edit.onsave = function(text){					if(text.checkVisible()){						return text;					}					else{						error_dialog("You must enter at least one visible character");						return this.contact;					}				};				div_data.appendChild(div);			}			else{				div_data.innerHTML = contact.contact;				this.createCategoryField(td_category,contact);			}			if (t.result.id == -1 || rights.remove){				var div_remove = document.createElement('div');				div_remove.style.display = 'inline-block';				this.addRemoveButton(contact,div_remove,edit);				div_data.appendChild(div_remove);			}		};				/**		 * @method dialogAddField		 * Creates the input_dialog displayed when clicking on the add contact button		 * The input the dialog will check that the given data is visible		 * The input_dialog created will call the addField method		 * @param contact_type {string} can be "email", "phone" or "IM"		 * @param contact_type_name {string} the text displayed in the header of the input_dialog		 */		this.dialogAddField = function (contact_type, contact_type_name){			input_dialog(theme.icons_16.question,				"Add a new "+contact_type_name,				"Enter the new "+contact_type_name,				"",				100,				function(text){					if(text.checkVisible()) return;					else return "You must enter at least one visible character";				},				function(text){					if(text) t.addField(text, contact_type, t.result.id);				}			);		};				/**		 * @method addField		 * Add the field in the database, updates the result object, and fianlly updates the displayed table		 * @param text {string} the new contact		 * @param contact_type {string} can be "email", "phone", or "IM"		 * @param id the one of the people or organization to which this new contact is linked		 */		this.addField = function (text, contact_type, id){			if (id != -1) {				/*Update the database*/				service.json("contact","add_contact",{table:"<?php if($type == "people") echo "People"; else echo "Organization";?>_contact",column:<?php echo json_encode($type);?>,key:<?php echo $id;?>,type:contact_type, contact:text, sub_type:"Work"},function(res){					if (!res) return;					/*Update the result object*/					var l = t.result.contacts.length;					t.result.contacts[l] = {contact_id:res.id, contact_type: contact_type, contact_sub_type:"Work", contact: text};					/*Update the table*/					if(contact_type == "email") t.addRow(t.result.contacts[l], t.email);					if(contact_type == "phone") t.addRow(t.result.contacts[l], t.phone);					if(contact_type == "IM") t.addRow(t.result.contacts[l], t.im);				});			} else {				/*Update the result object*/				var l = t.result.contacts.length;				t.result.contacts[l] = {contact_id:-1, contact_type: contact_type, contact_sub_type:"Work", contact: text};				/*Update the table*/				if(contact_type == "email") t.addRow(t.result.contacts[l], t.email);				if(contact_type == "phone") t.addRow(t.result.contacts[l], t.phone);				if(contact_type == "IM") t.addRow(t.result.contacts[l], t.im);			}		};				/**		 * @method addRemoveButton		 * Will add a removeButton to the given container		 * @param container		 * @param contact		 */		this.addRemoveButton = function (contact, container, edit){			var remove_button = document.createElement('img');			remove_button.src = theme.icons_16.remove;			remove_button.onmouseover = function(e){this.src = theme.icons_16.remove_black; stopEventPropagation(e);};			remove_button.onmouseout = function(e){this.src = theme.icons_16.remove; stopEventPropagation(e);};			remove_button.style.cursor = 'pointer';			remove_button.style.verticalAlign = 'bottom';			remove_button.onclick = function(){				if (edit)					edit.unedit();				confirm_dialog("Are you sure you want to remove this contact field?", function(text){if(text) t.removeContact(contact);});			};			container.appendChild(remove_button);		};				/**		 * @method removeContact		 * Remove a contact from the database, from the result object, and from the displayed table		 * @param contact		 */		this.removeContact = function (contact){			if (this.result.id != -1) {				service.json("data_model","remove_row",{table:"Contact", row_key:contact.contact_id}, function(res){					var tbody = null;					if(contact.contact_type == "email") tbody = t.email;					else if(contact.contact_type == "phone") tbody = t.phone;					else if(contact.contact_type == "IM") tbody = t.im;					for (var i = 0; i < tbody.childNodes.length; ++i)						if (tbody.childNodes[i].address == address)							tbody.removeChild(tbody.childNodes[i]);					t.result.contacts.remove(contact);					setTimeout(function(){t.updateCol1Width();},1);				});			} else {				var tbody = null;				if(contact.contact_type == "email") tbody = t.email;				else if(contact.contact_type == "phone") tbody = t.phone;				else if(contact.contact_type == "IM") tbody = t.im;				for (var i = 0; i < tbody.childNodes.length; ++i)					if (tbody.childNodes[i].address == address)						tbody.removeChild(tbody.childNodes[i]);				t.result.contacts.remove(contact);				setTimeout(function(){t.updateCol1Width();},1);			}		};				/**		 * @method createCategoryField		 * Create the category column in the displayed table		 * @param container the one which will contain the category field		 * @param contact		 */		this.createCategoryField = function (container,contact){			this.context = null;			container.innerHTML = contact.contact_sub_type;			container.style.cursor = "pointer";			container.onclick = function(){t.addContext(container,contact);};			setTimeout(function(){t.updateCol1Width();},1);		};		this.updateCol1Width = function() {			if (t.email_col1) t.email_col1.style.width = "";			if (t.phone_col1) t.phone_col1.style.width = "";			if (t.im_col1) t.im_col1.style.width = "";			if (t.email_col2) t.email_col2.style.width = "100%";			if (t.phone_col2) t.phone_col2.style.width = "100%";			if (t.im_col2) t.im_col2.style.width = "100%";			setTimeout(function() {				var w = 0;				if (t.email)				for (var i = 0; i < t.email.childNodes.length; ++i) {					var we = getWidth(t.email.childNodes[i].childNodes[0]);					if (we > w) w = we;				}				if (t.phone)				for (var i = 0; i < t.phone.childNodes.length; ++i) {					var we = getWidth(t.phone.childNodes[i].childNodes[0]);					if (we > w) w = we;				}				if (t.im)				for (var i = 0; i < t.im.childNodes.length; ++i) {					var we = getWidth(t.im.childNodes[i].childNodes[0]);					if (we > w) w = we;				}				if (t.email_col2) t.email_col2.style.width = "";				if (t.phone_col2) t.phone_col2.style.width = "";				if (t.im_col2) t.im_col2.style.width = "";				t.col1_width = w;				if (t.email_col1) t.email_col1.style.width = w+"px";				if (t.phone_col1) t.phone_col1.style.width = w+"px";				if (t.im_col1) t.im_col1.style.width = w+"px";			}, 1);		};				/**		 * @method addContext		 * Create the context_menu displayed below the category field after clicking		 * @param container		 * @param contact		 */		this.addContext = function(container,contact){			require('context_menu.js',function(){				if(!t.context){					t.context = new context_menu();					t.context.onclose = function() {t.context = null;};				}				t.context.clearItems();				t.setContext(container, "Work", contact);				t.setContext(container, "Home", contact);				t.setContext(container, "Custom", contact);								t.context.showBelowElement(container);			});		};				/**		 * @method setContext		 * Add an item to the category context_menu		 * @param container the one which contains the category field		 * @param {string} data the value of the item		 * @param contact		 * In the custom case, an input field is created		 */		this.setContext = function(container, data, contact){			var item = document.createElement('div');			item.innerHTML = data;						if(contact.contact_sub_type == data) item.style.fontWeight ='bold';			if(data == "Custom"){				var input = document.createElement("INPUT");				input.type = 'text';				input.maxLength = 10;				input.size = 10;				item.appendChild(input);				t.context.onclose = function(){					if(input.value.checkVisible()){						t.saveSubType(contact, input.value.uniformFirstLetterCapitalized(),container);					}				};				input.onkeypress = function(e){var ev = getCompatibleKeyEvent(e);										if(ev.isEnter) t.context.hide();									};			}			else{				item.onclick = function(){					t.saveSubType(contact,data,container);				};			}			item.className = 'context_menu_item';			t.context.addItem(item);			if(data == "Custom") item.onclick = null;		};				/**		 * @method saveSubType		 * Method called by the items of the category context menu on click		 * Update the database, the result object and the displayed table		 * @param contact_id the id of the contact to update		 * @param sub_type the updated one		 * @param container the one which contains the category field		 */		this.saveSubType = function(contact, sub_type,container){			if (contact.contact_id != -1) {				service.json("data_model","save_entity",{table:"Contact",key:contact.contact_id, field_sub_type:sub_type, lock:-1},function(res){					if(!res) return;					container.innerHTML = sub_type;					/*Update the result object*/					contact.contact_sub_type = sub_type;					setTimeout(function(){t.updateCol1Width();},1);				});			} else {				container.innerHTML = sub_type;				contact.contact_sub_type = sub_type;				setTimeout(function(){t.updateCol1Width();},1);			}		};				if (editable != null) everything_ready();		require('editable_cell.js',function(){			editable = 'ok';			everything_ready();		});	}	</script>	<?php	return $fct_name;}?>