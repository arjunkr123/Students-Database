<?phpfunction contacts_structure($type, $id) {	$table_contact = null;
	$join_contact_column = null;
	$join_value = $id;
	if($type == "people"){
		$table_contact = "People_contact";
		$join_contact_column = "people";	}
	if($type == "organization"){
		$table_contact = "Organization_contact";
		$join_contact_column = "organization";
	}		$q_contacts = SQLQuery::create()->select($table_contact)
		->field("Contact","id","contact_id")
		->field("Contact","type","contact_type")
		->field("Contact","contact","contact")
		->field("Contact","sub_type","contact_sub_type")
		->join($table_contact,"Contact",array("contact"=>"id"))
		->where($table_contact.".".$join_contact_column." = '".SQLQuery::escape($join_value)."'")
		->order_by("contact_type");
	$contacts = $q_contacts->bypass_security()->execute();
	$s = "[";	$first = true;	foreach($contacts as $contact){		if(!$first) $s .= ", ";		$first = false;		$s .= "{";		$s .= "id:".json_encode($contact["contact_id"]);		$s .= ", type:".json_encode($contact["contact_type"]);		$s .= ", contact:".json_encode($contact["contact"]);		$s .= ", sub_type:".json_encode($contact["contact_sub_type"]);		$s .= "}";	}	$s .= "]";	return $s;}/** * The rights of the user is taken into account to set this page * This page needs no service to be generated * @param $page {Page} the page in which this screen is included * @param $type {string} can be 'people' or 'organization' * @param $id the people_id or organization_id or -1 for new people/organization * @return string the name of the javascript variable containing the contact control */ function contact(&$page,$type,$container_id,$id){	require_once("component/data_model/Model.inc");	$rights = array();		$table_contact = null;	$join_contact_column = null;	$join_value = $id;	$locks = array();	if($type == "people"){		$table_contact = "People_contact";		$join_contact_column = "people";		if ($id <> -1) {			$q = SQLQuery::create()->select("People");			$q->where("id",$id);			DataModel::get()->getTable("People")->filterReadAccess($q, "People");			$rows = $q->execute();			if (count($rows) == 0) {				PNApplication::error("Cannot access to this People");				return;			}						$q = SQLQuery::create()->select("People");			$q->where("id",$id);			DataModel::get()->getTable("People")->prepareSelectToDetermineRemoveAccess($q, "People", $locks);			$rows = $q->execute();			$rows = DataModel::get()->getTable("People")->filterRemoveAccess($rows);			$rights['remove'] = count($rows) == 1;						$q = SQLQuery::create()->select("People");			$q->where("id",$id);			DataModel::get()->getTable("People")->prepareSelectToDetermineWriteAccess($q, "People");			$rows = $q->execute();			$rows = DataModel::get()->getTable("People")->filterWriteAccess($rows);			$rights['edit'] = count($rows) == 1;						$rights['add'] = $rights['remove'];		} else {			$rights['remove'] = $rights['add'] = $rights['edit'] = true;		}	}	if($type == "organization"){		$table_contact = "Organization_contact";		$join_contact_column = "organization";		if ($id <> -1) {			$q = SQLQuery::create()->select("Organization");			$q->where("id",$id);			DataModel::get()->getTable("Organization")->filterReadAccess($q, "Organization");			$rows = $q->execute();			if (count($rows) == 0) {				PNApplication::error("Cannot access to this Organization");				return;			}							$q = SQLQuery::create()->select("Organization");			$q->where("id",$id);			DataModel::get()->getTable("Organization")->prepareSelectToDetermineRemoveAccess($q, "Organization", $locks);			$rows = $q->execute();			$rows = DataModel::get()->getTable("Organization")->filterRemoveAccess($rows);			$rights['remove'] = count($rows) == 1;							$q = SQLQuery::create()->select("Organization");			$q->where("id",$id);			DataModel::get()->getTable("Organization")->prepareSelectToDetermineWriteAccess($q, "Organization");			$rows = $q->execute();			$rows = DataModel::get()->getTable("Organization")->filterWriteAccess($rows);			$rights['edit'] = count($rows) == 1;							$rights['add'] = $rights['remove'];		} else {			$rights['remove'] = $rights['add'] = $rights['edit'] = true;		}	}		if($id <> -1)		$contacts = contacts_structure($type, $id);	$contacts_var_name = $page->generate_id();	?>	<script type='text/javascript'>	/**	 * Generate the result object that contains all the info about the contact	 * result = {id:, contacts:[{contact_id: ,contact_type: ,contact: ,contact_sub_type:}]}	 * id is the one of the people or the organization	 * if no contact, contacts = []	 */	<?php	echo $contacts_var_name." = ";	if ($id <> -1) { echo $contacts.";"; }	else echo "[];";	$page->add_javascript("/static/contact/contacts.js");	$page->add_javascript("/static/contact/contact_type.js");	$var_id = $page->generate_id();	$page->onload("window.$var_id = new contacts(".json_encode($container_id).",".json_encode($table_contact).",".json_encode($join_contact_column).",".json_encode($id).",".$contacts_var_name.",".json_encode($rights['edit']).",".json_encode($rights['add']).",".json_encode($rights['remove']).");");	?>	</script>	<?php	return $var_id;}?>