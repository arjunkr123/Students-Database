<?php /** * The rights of the user is taken into account to set this page * This page needs no service to be generated * @param $type {string} can be 'people' or 'organization' * @param $container_id {string} the id of the container which will contain the page * @param $id the people_id or organization_id */ function contact(&$page,$type,$container_id,$id){		require_once("component/data_model/Model.inc");	$rights = array();	$fct_name = "create_contact_screen_".$page->generate_id();	$page->onload($fct_name."();");		$table_contact = null;	$join_contact_column = null;	$join_value = $id;	if($type == "people"){		$table_contact = "People_contact";		$join_contact_column = "people";		$rights['remove'] = DataModel::get()->getTable("People_contact")->canRemove();		$rights['edit'] = DataModel::get()->getTable("People_contact")->canModifyField('contact');		$rights['add'] = DataModel::get()->getTable("People_contact")->canAdd();	}	if($type == "organization"){		$table_contact = "Organization_contact";		$join_contact_column = "organization";		$rights['remove'] = DataModel::get()->getTable("Organization_contact")->canRemove();		$rights['edit'] = DataModel::get()->getTable("Organization_contact")->canModifyField('contact');		$rights['add'] = DataModel::get()->getTable("Organization_contact")->canAdd();	}		if($type == "organization" || $type == "people"){		$q_contacts = SQLQuery::create()->select($table_contact)						->field("Contact","id","contact_id")						->field("Contact","type","contact_type")						->field("Contact","contact","contact")						->field("Contact","sub_type","contact_sub_type")						->join($table_contact,"Contact",array("contact"=>"id"))						->where($table_contact.".".$join_contact_column." = '".SQLQuery::escape($join_value)."'")						->order_by("contact_type");		$contacts = $q_contacts->execute();	?>	<script type='text/javascript'>	function <?php echo $fct_name; ?>(){	/**	 * Generate the result object that contains all the info about the contact	 * result = {id:, contacts:[{contact_id: ,contact_type: ,contact: ,contact_sub_type:}]}	 * id is the one of the people or the organization	 * if no contact, contacts = []	 */	var result = <?php		if (!isset($contacts[0]["contact_id"])) echo "{id:'".$join_value."', contacts:[]};";		else{			echo "{id:'".$join_value."', contacts:[";			$first = true;			foreach($contacts as $contact){				if(!$first) echo ", ";				$first = false;				echo "{";				echo "contact_id:".json_encode($contact["contact_id"]);				echo ", contact_type:".json_encode($contact["contact_type"]);				echo ", contact:".json_encode($contact["contact"]);				echo ", contact_sub_type:".json_encode($contact["contact_sub_type"]);				echo "}";			}			echo "]};";		}	}	?>	var editable = null;	var everything_ready = function(){		result.createTableContact();	}		/**		 * {object} rights contains the edit, remove and add rights of the current user		 */		var rights = {};		rights.remove = <?php echo $rights['remove'];?>;		rights.edit = <?php echo $rights['edit'];?>;		rights.add = <?php echo $rights['add'];?>;				/**		 * @method createTableContact		 * Starts creating the different elements of the table contact (email, phone & instant message)		 * If No contact in result and the user is not allowed to add contacts, "There is no contact information" is displayed		 */		result.createTableContact = function(){			var container = document.getElementById("<?php echo $container_id;?>");			if(!rights.add && typeof(result.contacts[0]) == 'undefined'){				var div = document.createElement("div");				div.innerHTML = "There is no contact information";				container.appendChild(div);			}			else{				this.createElementTableContact(container, "email", "Email");				this.createElementTableContact(container, "phone", "Phone");				this.createElementTableContact(container, "IM", "Instant Message");			}		}				/**		 * @method createElementTableContact		 * Create the table containing all the contacts for the given category		 * A distinction is done according to the rights of the user		 * @param container		 * @param contact_type {string} can be "email", "phone" or "IM"		 * @param contact_type_name {string} the text displayed in the header of the table		 */		result.createElementTableContact = function(container, contact_type, contact_type_name){			var t = this;			var table = document.createElement("table");			var thead = document.createElement("thead");			var tbody = document.createElement("tbody");			if(contact_type == "email") this.email = tbody;			if(contact_type == "phone") this.phone = tbody;			if(contact_type == "IM") this.im = tbody;			var tfoot = document.createElement("tfoot");			var tr_head = document.createElement("tr");			var th_head_1 = document.createElement("th");			th_head_1.style.width = '120px';			var th_head_2 = document.createElement("th");			var th_head_3 = document.createElement("th");			th_head_2.style.textAlign = 'left';			th_head_2.innerHTML = contact_type_name;			tr_head.appendChild(th_head_1);			tr_head.appendChild(th_head_2);			tr_head.appendChild(th_head_3);			thead.appendChild(tr_head);			table.appendChild(thead);			for(var i = 0; i < this.contacts.length; i++){				if (this.contacts[i].contact_type == contact_type){					t.addRow(i, tbody);				}			}			table.appendChild(tbody);			if(rights.add){				var td_foot_1 = document.createElement('td');				var td_foot_2 = document.createElement('td');				var td_foot_3 = document.createElement('td');				var tr_foot = document.createElement('tr');				td_foot_2.innerHTML = "Add " + contact_type_name;				td_foot_2.style.cursor = 'pointer';				td_foot_2.style.fontStyle ='italic';				td_foot_2.style.color = "#808080";				td_foot_2.contact_type = contact_type;				td_foot_2.contact_type_name = contact_type_name;				td_foot_2.onclick = function(){t.dialogAddField(this.contact_type, this.contact_type_name);};				// td_foot_2.onmouseover = function(){td_foot_2.style.textDecoration = 'underline';}				// td_foot_2.onmouseout = function(){td_foot_2.style.textDecoration = '';}				tr_foot.appendChild(td_foot_1);				tr_foot.appendChild(td_foot_2);				tr_foot.appendChild(td_foot_3);				tfoot.appendChild(tr_foot);				table.appendChild(tfoot);			}						container.appendChild(table);		}				/**		 * @method addRow		 * Create a row in the displayed table		 * @param index the index in the result object of the given contact		 * @param tbody the reference to the tbody in which the row will be inserted		 */		result.addRow = function(index, tbody){			var tr = document.createElement("tr");			this.contacts[index].contact_tr = tr;			var td_category = document.createElement("td");			td_category.style.textAlign = 'right';			td_category.style.paddingRight = '20px';			td_category.style.color = "#808080";			var td_remove = document.createElement("td");			tr.appendChild(td_category);			var td_data = document.createElement("td");			var div_data = document.createElement("div");			if(rights.edit){				/*Manage the category Field*/				result.createCategoryField(td_category,index);				/*Manage the data field*/				var div = document.createElement("div");				div.style.display = 'inline-block';				var edit = new editable_cell(div,"Contact","contact",result.contacts[index].contact_id, 'field_text', null, result.contacts[index].contact);				edit.contact = result.contacts[index].contact;				edit.onsave = function(text){					if(text.checkVisible()){						return text;					}					else{						error_dialog("You must enter at least one visible caracter");						return this.contact;					}										};				div_data.appendChild(div);				td_data.appendChild(div_data);			}			else{				div_data.innerHTML = result.contacts[index].contact;				td_data.appendChild(div_data);				result.createCategoryField(td_category,index);			}			tr.appendChild(td_category);			tr.appendChild(td_data);			if(rights.remove){				var div_remove = document.createElement('div');				div_remove.style.display = 'inline-block';				this.addRemoveButton(index,div_remove);				div_data.appendChild(div_remove);			}			tr.appendChild(td_remove);			tbody.appendChild(tr);		}				/**		 * @method dialogAddField		 * Creates the input_dialog displayed when clicking on the add contact button		 * The input the dialog will check that the given data is visible		 * The input_dialog created will call the addField method		 * @param contact_type {string} can be "email", "phone" or "IM"		 * @param contact_type_name {string} the text displayed in the header of the input_dialog		 */		result.dialogAddField = function (contact_type, contact_type_name){			input_dialog(theme.icons_16.question,						"Add a new "+contact_type_name,						"Enter the new "+contact_type_name,						"",						100,						function(text){							if(text.checkVisible()) return;							else return "You must enter at least one visible caracter"						},						function(text){							if(text) result.addField(text, contact_type, result.id);						}						);		}				/**		 * @method addField		 * Add the field in the database, updates the result object, and fianlly updates the displayed table		 * @param text {string} the new contact		 * @param contact_type {string} can be "email", "phone", or "IM"		 * @param id the one of the people or organization to which this new contact is linked		 */		result.addField = function (text, contact_type, id){			/*Update the database*/			var field_saved_id = null;			service.json("data_model","save_entity",{table:"Contact", field_type:contact_type, field_contact:text, field_sub_type:"Work"},function(res){			if(!res) return;			field_saved_id = res.key;			},true);			service.json("data_model","save_entity",{table:"<?php if($type == "people") echo "People"; else echo "Organization";?>_contact", field_contact:field_saved_id, field_<?php echo $type;?>:id},function(res){return},true);			/*Update the result object*/			var l = this.contacts.length;			this.contacts[l] = {contact_id:field_saved_id, contact_type: contact_type, contact_sub_type:"Work", contact: text};			/*Update the table*/			if(contact_type == "email") this.addRow(l, result.email);			if(contact_type == "phone") this.addRow(l, result.phone);			if(contact_type == "IM") this.addRow(l, result.im);		}				/**		 * @method findIndex		 * Get the index in the result object		 * @param contact_id		 * @param address_id: useless in that case		 * @return index{contact_index: ,address_index: }		 */		result.findIndex = function(contact_id,address_id){			var contact_index = null;			var address_index = null;			var index = {};			if(contact_id != null){				for(var i = 0; i < result.contacts.length; i++){					if(result.contacts[i].contact_id == contact_id){						contact_index = i;						break;					}				}			}			if(address_id != null){				for(var i =0; i < result.addresses.length; i++){					if(result.addresses[i].address_id == address_id){						address_index = i;						break;					}				}			}			index.contact_index = contact_index;			index.address_index = address_index;			return index;		}				/**		 * @method addRemoveButton		 * Will add a removeButton to the given container		 * @param container		 * @param index the index in the result object of the contact to remove		 */		result.addRemoveButton = function (index, container){			var remove_button = document.createElement('img');			remove_button.src = theme.icons_16.remove;			remove_button.onmouseover = function(e){this.src = theme.icons_16.remove_black; stopEventPropagation(e);};			remove_button.onmouseout = function(e){this.src = theme.icons_16.remove; stopEventPropagation(e);};			remove_button.style.cursor = 'pointer';			remove_button.style.verticalAlign = 'bottom';			remove_button.onclick = function(){				confirm_dialog("Are you sure you want to remove this contact field?", function(text){if(text) result.removeContact(index);});			};			container.appendChild(remove_button);		}				/**		 * @method removeContact		 * Remove a contact from the database, from the result object, and from the displayed table		 * @param index the index in the result object of the contact to remove		 */		result.removeContact = function (index){			var contact_id = result.contacts[index].contact_id;			/*Remove from database*/			service.json("data_model","remove_row",{table:"Contact", row_key:contact_id}, function(res){			if(!res) return;			},true);			/*Remove from table*/			if(result.contacts[index].contact_type == "email") this.email.removeChild(result.contacts[index].contact_tr);			if(result.contacts[index].contact_type == "phone") this.phone.removeChild(result.contacts[index].contact_tr);			if(result.contacts[index].contact_type == "IM") this.im.removeChild(result.contacts[index].contact_tr);			/*Reset in result object*/			result.contacts[index].contact_id = null;			result.contacts[index].contact = null;			result.contacts[index].contact_type = null;			result.contacts[index].contact_sub_type = null;					}				/**		 * @method createCategoryField		 * Create the category column in the displayed table		 * @param container the one which will contain the category field		 * @param index the index in the result object of the contact to which this category is linked		 */		result.createCategoryField = function (container,index){			this.context = null;			container.innerHTML = result.contacts[index].contact_sub_type;			container.style.cursor = "pointer";			container.onclick = function(){result.addContext(container,index);};		}				/**		 * @method addContext		 * Create the context_menu displayed below the category field after clicking		 * @param container		 * @param index the index in the result object of the contact to which this category is linked		 */		result.addContext = function(container,index){			require('context_menu.js',function(){				if(!result.context){					result.context = new context_menu();					result.context.onclose = function() {result.context = null;};				}				result.context.clearItems();				result.setContext(container, "Work",index);				result.setContext(container, "Home",index);				result.setContext(container, "Custom",index);								result.context.showBelowElement(container);			});		}				/**		 * @method setContext		 * Add an item to the category context_menu		 * @param container the one which contains the category field		 * @param {string} data the value of the item		 * @param index the index in the result object of the contact to which this category is linked		 * In the custom case, an input field is created		 */		result.setContext = function(container, data, index){			var item = document.createElement('div');			item.innerHTML = data;						if(result.contacts[index].contact_sub_type == data) item.style.fontWeight ='bold';			var contact_id = this.contacts[index].contact_id;			if(data == "Custom"){				var input = document.createElement("INPUT");				input.type = 'text';				input.maxLength = 10;				input.size = 10;				item.appendChild(input);				result.context.onclose = function(){					if(input.value.checkVisible()){						result.saveSubType(contact_id, input.value.uniformFirstLetterCapitalized(),container);					}				};				input.onkeypress = function(e){var ev = getCompatibleKeyEvent(e);										if(ev.isEnter) result.context.hide();									};			}			else{				item.onclick = function(){					result.saveSubType(contact_id,data,container);				};			}			var temp = item.style.backgroundColor;			item.onmouseover = function(){this.style.backgroundColor ='#808080';};			item.onmouseout = function(){this.style.backgroundColor = temp;};			item.style.cursor = 'pointer';			result.context.addItem(item);			if(data == "Custom") item.onclick = null;		}				/**		 * @method saveSubType		 * Method called by the items of the category context menu on click		 * Update the database, the result object and the displayed table		 * @param contact_id the id of the contact to update		 * @param sub_type the updated one		 * @param container the one which contains the category field		 */		result.saveSubType = function(contact_id, sub_type,container){			var index = this.findIndex(contact_id, null).contact_index;			service.json("data_model","save_entity",{table:"Contact",key:contact_id, field_sub_type:sub_type, lock:-1},function(res){				if(!res) return;				},true);			container.innerHTML = sub_type;			/*Update the result object*/			result.contacts[index].contact_sub_type = sub_type;		}				if (editable != null) everything_ready();	require('editable_cell.js',function(){	editable = 'ok';	if (result != null) everything_ready();	});		}	</script>	<?php	}?>