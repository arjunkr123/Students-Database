<?php/** * The rights of the user is taken into account to set this page * This page needs no service to be generated * @param $type {string} can be 'people' or 'organization' * @param $container_id {string} the id of the container which will contain the page * @param $id the people_id or organization_id */ function address(&$page,$type,$container_id,$id){		require_once("component/data_model/Model.inc");	$rights = array();		$fct_name = "create_contact_screen_".$page->generate_id();	$page->onload($fct_name."();");		$table_address = null;	$join_address_column = null;	$join_value = $id;	if($type == "people"){		$table_address = "People_address";		$join_address_column = "address";		$rights['remove'] = DataModel::get()->getTable("People_address")->canRemove();		$rights['edit'] = DataModel::get()->getTable("People_address")->canModifyField('address');		$rights['add'] = DataModel::get()->getTable("People_address")->canAdd();	}	if($type == "organization"){		$table_address = "Organization_address";		$join_address_column = "organization";		$rights['remove'] = DataModel::get()->getTable("Organization_address")->canRemove();		$rights['edit'] = DataModel::get()->getTable("Organization_address")->canModifyField('address');		$rights['add'] = DataModel::get()->getTable("Organization_address")->canAdd();	}	if($type == "organization" || $type == "people"){		$q_addresses = SQLQuery::create()->select($table_address)						->field($table_address,"address","address_id")						->field("Postal_address","country","country")						->field("Postal_address","geographic_area","geographic_area")						->field("Postal_address","street","street")						->field("Postal_address","street_number","street_number")						->field("Postal_address","building","building")						->field("Postal_address","unit","unit")						->field("Postal_address","additional","additional")						->field("Postal_address","address_type","address_type")						->join($table_address,"Postal_address",array("address"=>"id"))						->where($table_address.".".$join_address_column." = '".SQLQuery::escape($join_value)."'");		$addresses = $q_addresses->execute();	?>	<script type='text/javascript'>	function <?php echo $fct_name; ?>(){	/**	 * Generate the result object that contains all the info about the address	 * result = {id:, addresses:[{address_id: ,country: ,geographic_area: ,street: ,street_number: ,building: ,unit: ,additional: ,address_type:}]}	 * id is the one of the people or the organization	 * if no address, addresses = []	 */	var result = <?php 		if(!isset($addresses[0]['address_id'])) echo "{id:".json_encode($join_value).", addresses:[]};";		else {			echo "{id:'".$join_value."', addresses:[";			$first = true;			foreach($addresses as $address){				if(!$first) echo ", ";				$first = false;				echo "{";				echo "address_id:".json_encode($address["address_id"]);				echo ", country:".json_encode($address["country"]);				echo ", geographic_area:".json_encode($address["geographic_area"]);				echo ", street:".json_encode($address["street"]);				echo ", street_number:".json_encode($address["street_number"]);				echo ", building:".json_encode($address["building"]);				echo ", unit:".json_encode($address["unit"]);				echo ", additional:".json_encode($address["additional"]);				echo ", address_type:".json_encode($address["address_type"]);				echo "}";			}			echo "]};";		}	}	?>	var editable = null;	var everything_ready = function (){		result.createTableAddress();	}		/**		 * {object} rights contains the edit, remove and add rights of the current user		 */		var rights = {};		rights.remove = <?php echo $rights['remove'];?>;		rights.edit = <?php echo $rights['edit'];?>;		rights.add = <?php echo $rights['add'];?>;		/**		 * @method createTableAddress		 * Starts creating the different elements of the displayed table of addresses		 * If No address in result and the user is not allowed to add address, "There is no address linked to this contact" is displayed		 */		result.createTableAddress = function(){			var container = document.getElementById("<?php echo $container_id;?>");			if(!rights.add && typeof(result.addresses[0]) == 'undefined'){				var div = document.createElement("div");				div.innerHTML = "There is no address linked to this contact";				container.appendChild(div);			}			else{				this.createElementTableAddress(container, "address", "Address");			}		}		/**		 * @method createElementTableAddress		 * Create the table containing all the contacts for the given category		 * A distinction is done according to the rights of the user		 * @param container		 * @param contact_type {string} "address"		 * @param contact_type_name {string} the text displayed in the header of the table		 */		result.createElementTableAddress = function(container, contact_type, contact_type_name){			var t = this;			var table = document.createElement("table");			var thead = document.createElement("thead");			var tbody = document.createElement("tbody");			if(contact_type == "address") this.address = tbody;			var tfoot = document.createElement("tfoot");			var tr_head = document.createElement("tr");			var th_head_1 = document.createElement("th");			th_head_1.style.width = '120px';			var th_head_2 = document.createElement("th");			var th_head_3 = document.createElement("th");			th_head_2.style.textAlign = 'left';			th_head_2.innerHTML = contact_type_name;			tr_head.appendChild(th_head_1);			tr_head.appendChild(th_head_2);			tr_head.appendChild(th_head_3);			thead.appendChild(tr_head);			table.appendChild(thead);			for(var i = 0; i < this.addresses.length; i++){				t.addRow(i, tbody);			}			table.appendChild(tbody);			if(rights.add){				var td_foot_1 = document.createElement('td');				var td_foot_2 = document.createElement('td');				var td_foot_3 = document.createElement('td');				var tr_foot = document.createElement('tr');				td_foot_2.innerHTML = "Add " + contact_type_name;				td_foot_2.style.cursor = 'pointer';				td_foot_2.style.fontStyle ='italic';				td_foot_2.style.color = "#808080";				td_foot_2.contact_type = contact_type;				td_foot_2.contact_type_name = contact_type_name;				td_foot_2.onclick = function(){t.addAddress();};				// td_foot_2.onmouseover = function(){td_foot_2.style.textDecoration = 'underline';}				// td_foot_2.onmouseout = function(){td_foot_2.style.textDecoration = '';}				tr_foot.appendChild(td_foot_1);				tr_foot.appendChild(td_foot_2);				tr_foot.appendChild(td_foot_3);				tfoot.appendChild(tr_foot);				table.appendChild(tfoot);			}						container.appendChild(table);		}				/**		 * @method addRow		 * Create a row in the displayed table		 * @param index the index in the result object of the given address		 * @param tbody the reference to the tbody in which the row will be inserted		 */		result.addRow = function(index, tbody,is_new){			var tr = document.createElement("tr");			this.addresses[index].address_tr = tr;			var td_category = document.createElement("td");			td_category.style.textAlign = 'right';			td_category.style.paddingRight = '20px';			td_category.style.color = "#808080";			td_category.style.verticalAlign = 'top';			var td_remove = document.createElement("td");			tr.appendChild(td_category);			var td_data = document.createElement("td");			var div_data = document.createElement("div");			if(rights.edit){				/*Manage the category Field*/				result.createCategoryField(td_category,index);				/*Manage the data field*/				var div = document.createElement("div");				div.style.display = 'inline-block';				var edit = new editable_table(div,"Postal_address",result.addresses[index].address_id, 'field_address', null);				/* If we are adding a new address, we immediately open the menu to set the address parameters*/				if(is_new){					/*We must start with the unedit mode otherwize edit.elem is not defined*/					edit.unedit();					setTimeout(function(){edit.edit();},100)				}				div_data.appendChild(div);				td_data.appendChild(div_data);			}			else{				/*Create the uneditable field_address*/				require("typed_field.js", function(){					require("field_address.js", function(){						var editableAddress = new field_address(result.addresses[index].address_id, false, null, null, null);						div_data.appendChild(editableAddress.element);					});				});				td_data.appendChild(div_data);				result.createCategoryField(td_category,index);			}			tr.appendChild(td_category);			tr.appendChild(td_data);			if(rights.remove){				var div_remove = document.createElement('div');				div_remove.style.display = 'inline-block';				this.addRemoveButton(index,div_remove);				div_data.appendChild(div_remove);			}			tr.appendChild(td_remove);			tbody.appendChild(tr);		}				/**		 * @method addAddress		 * Add the address in the database(only in the Postal_address table) and call the updateTable%type%_address method with the new id		 */		result.addAddress = function(){			var new_address_id = null;			service.json("data_model","save_entity",{table:"Postal_address",field_country:null,field_geographic_area:null,field_street:null,field_street_number:null,field_building:null,field_unit:null,field_additional:null, field_address_type:"Work"},function(res){				if(!res) return;				new_address_id = res.key;				<?php  if($type == "people") echo "result.updateTablePeople_address(new_address_id);";						else echo "result.updateTableOrganization_address(new_address_id);";				?>			});		}				/**		 * @method updateTablePeople_address		 * Add the new address in the People_address table		 */		result.updateTablePeople_address = function(id){			service.json("data_model","save_entity",{table:"People_address",field_people:result.id,field_address:id},function(res){				if(!res) return;				/* Once it is done we can start the next steps */				result.finishAddingAddress(id);			});		}				/**		 * @method updateTableOrganization_address		 * Add the new address in the Organization_address table		 */		result.updateTableOrganization_address = function(id){			service.json("data_model","save_entity",{table:"Organization_address",field_organization:result.id,field_address:id},function(res){				if(!res) return;				/* Once it is done we can start the next steps */				result.finishAddingAddress(id);			});		}				/**		 * @method finishAddingAddress		 * Update the result object and the displayed table		 * @param id the one of the new address		 */		result.finishAddingAddress = function(id){			/* Update the result object*/			var l = this.addresses.length;			this.addresses[l] = {address_id:id, country:null, geographic_area:null, street:null, street_number:null, building:null, unit:null, additional:null, address_type:"Work"};			/* Update the table */			this.addRow(l,result.address,true);		}				/**		 * @method findIndex		 * Get the index in the result object		 * @param contact_id: useless in that case		 * @param address_id		 * @return index{contact_index: ,address_index: }		 */		result.findIndex = function(contact_id,address_id){			var contact_index = null;			var address_index = null;			var index = {};			if(contact_id != null){				for(var i = 0; i < result.contacts.length; i++){					if(result.contacts[i].contact_id == contact_id){						contact_index = i;						break;					}				}			}			if(address_id != null){				for(var i =0; i < result.addresses.length; i++){					if(result.addresses[i].address_id == address_id){						address_index = i;						break;					}				}			}			index.contact_index = contact_index;			index.address_index = address_index;			return index;		}				/**		 * @method addRemoveButton		 * Will add a removeButton to the given container		 * @param container		 * @param index the index in the result object of the address to remove		 */		result.addRemoveButton = function (index, container){			var remove_button = document.createElement('img');			remove_button.src = theme.icons_16.remove;			remove_button.onmouseover = function(e){this.src = theme.icons_16.remove_black; stopEventPropagation(e);};			remove_button.onmouseout = function(e){this.src = theme.icons_16.remove; stopEventPropagation(e);};			remove_button.style.cursor = 'pointer';			//remove_button.style.verticalAlign = 'bottom';			remove_button.onclick = function(){				confirm_dialog("Are you sure you want to remove this address?", function(text){if(text) result.removeAddress(index);});			};			container.appendChild(remove_button);		}				/**		 * @method removeAddress		 * Remove an address from the database, from the result object, and from the displayed table		 * @param index the index in the result object of the contact to remove		 */		result.removeAddress = function (index){			var address_id = result.addresses[index].address_id;			/*Remove from database*/			service.json("data_model","remove_row",{table:"Postal_address", row_key:address_id}, function(res){			if(!res) return;			},true);			/*Remove from displayed table*/			this.address.removeChild(result.addresses[index].address_tr);			/*Reset in result object*/			result.addresses[index].address_id = null;			result.addresses[index].country = null;			result.addresses[index].geographic_area = null;			result.addresses[index].street = null;			result.addresses[index].street_number = null;			result.addresses[index].building = null;			result.addresses[index].additional = null;			result.addresses[index].address_type = null;		}				/**		 * @method createCategoryField		 * Create the category column in the displayed table		 * @param container the one which will contain the category field		 * @param index the index in the result object of the address to which this category is linked		 */		result.createCategoryField = function (container,index){			this.context = null;			container.innerHTML = result.addresses[index].address_type;			container.style.cursor = "pointer";			container.onclick = function(){result.addContext(container,index);};		}				/**		 * @method addContext		 * Create the context_menu displayed below the category field after clicking		 * @param container		 * @param index the index in the result object of the address to which this category is linked		 */		result.addContext = function(container,index){			require('context_menu.js',function(){				if(!result.context){					result.context = new context_menu();					result.context.onclose = function() {result.context = null};				}				result.context.clearItems();				result.setContext(container, "Work",index);				result.setContext(container, "Home",index);				result.setContext(container, "Custom",index);								result.context.showBelowElement(container);			});		}				/**		 * @method setContext		 * Add an item to the category context_menu		 * @param container the one which contains the category field		 * @param {string} data the value of the item		 * @param index the index in the result object of the address to which this category is linked		 * In the custom case, an input field is created		 */		result.setContext = function(container, data, index){			var item = document.createElement('div');			item.innerHTML = data;						if(result.addresses[index].address_type == data) item.style.fontWeight ='bold';			var address_id = this.addresses[index].address_id;			if(data == "Custom"){				var input = document.createElement("INPUT");				input.type = 'text';				input.maxLength = 10;				input.size = 10;				item.appendChild(input);				result.context.onclose = function(){					if(input.value.checkVisible()){						result.saveSubType(address_id, input.value.uniformFirstLetterCapitalized(),container);					}				};				input.onkeypress = function(e){var ev = getCompatibleKeyEvent(e);										if(ev.isEnter) result.context.hide();									};			}			else{				item.onclick = function(){					result.saveSubType(address_id,data,container);				};			}			var temp = item.style.backgroundColor;			item.onmouseover = function(){this.style.backgroundColor ='#808080';};			item.onmouseout = function(){this.style.backgroundColor = temp;};			item.style.cursor = 'pointer';			result.context.addItem(item);			if(data == "Custom") item.onclick = null;		}				/**		 * @method saveSubType		 * Method called by the items of the category context menu on click		 * Update the database, the result object and the displayed table		 * @param address_id the id of the contact to update		 * @param sub_type the updated one		 * @param container the one which contains the category field		 */		result.saveSubType = function(address_id, sub_type,container){			var index = this.findIndex(null, address_id).address_index;			service.json("data_model","save_entity",{table:"Postal_address",key:address_id, field_address_type:sub_type, lock:-1},function(res){				if(!res) return;				},true);			container.innerHTML = sub_type;			/*Update the result object*/			result.addresses[index].address_type = sub_type;		}				if (editable != null) everything_ready();			// }	// );	require('editable_table.js',function(){	editable = 'ok';	if (result != null) everything_ready();	});		}	</script>	<?php}?>