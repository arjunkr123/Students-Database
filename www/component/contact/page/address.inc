<?php/** * The rights of the user is taken into account to set this page * This page needs no service to be generated * @param $type {string} can be 'people' or 'organization' * @param $container_id {string} the id of the container which will contain the page * @param $id the people_id or organization_id, or -1 for a new one * @return string the name of the javascript constructor to call */ function address(&$page,$type,$container_id,$id){	require_once("component/data_model/Model.inc");	$rights = array();		$fct_name = "create_contact_screen_".$page->generate_id();		$table_address = null;	$join_address_column = null;	$join_value = $id;	if($type == "people"){		$table_address = "People_address";		$join_address_column = "people";		$rights['remove'] = DataModel::get()->getTable("People_address")->canRemove();		$rights['edit'] = DataModel::get()->getTable("People_address")->canModifyField('address');		$rights['add'] = DataModel::get()->getTable("People_address")->canAdd();	}	if($type == "organization"){		$table_address = "Organization_address";		$join_address_column = "organization";		$rights['remove'] = DataModel::get()->getTable("Organization_address")->canRemove();		$rights['edit'] = DataModel::get()->getTable("Organization_address")->canModifyField('address');		$rights['add'] = DataModel::get()->getTable("Organization_address")->canAdd();	}	if($id <> -1){		$q_addresses = SQLQuery::create()->select($table_address)						->field($table_address,"address","address_id")						->field("Postal_address","country","country")						->field("Postal_address","geographic_area","geographic_area")						->field("Postal_address","street","street")						->field("Postal_address","street_number","street_number")						->field("Postal_address","building","building")						->field("Postal_address","unit","unit")						->field("Postal_address","additional","additional")						->field("Postal_address","address_type","address_type")						->join($table_address,"Postal_address",array("address"=>"id"))						->where($table_address.".".$join_address_column." = '".SQLQuery::escape($join_value)."'");		$addresses = $q_addresses->execute();	}	?>	<script type='text/javascript'>	function <?php echo $fct_name; ?>(onready){		/**		 * Generate the result object that contains all the info about the address		 * result = {id:, addresses:[{address_id: ,country: ,geographic_area: ,street: ,street_number: ,building: ,unit: ,additional: ,address_type:}]}		 * id is the one of the people or the organization		 * if no address, addresses = []		 */		this.result = <?php		echo "{id:".$id.", addresses: ["; 		if ($id <> -1) {			$first = true;			foreach($addresses as $address){				if(!$first) echo ", ";				$first = false;				echo "{";				echo "address_id:".json_encode($address["address_id"]);				echo ", country:".json_encode($address["country"]);				echo ", geographic_area:".json_encode($address["geographic_area"]);				echo ", street:".json_encode($address["street"]);				echo ", street_number:".json_encode($address["street_number"]);				echo ", building:".json_encode($address["building"]);				echo ", unit:".json_encode($address["unit"]);				echo ", additional:".json_encode($address["additional"]);				echo ", address_type:".json_encode($address["address_type"]);				echo "}";			}		}		echo "]};";?>		var t=this;		var editable = null;		var everything_ready = function (){			t.createTableAddress();			if (onready) onready(t);		};		/**		 * {object} rights contains the edit, remove and add rights of the current user		 */		var rights = {};		rights.remove = <?php echo $rights['remove'];?>;		rights.edit = <?php echo $rights['edit'];?>;		rights.add = <?php echo $rights['add'];?>;		/**		* Set the result object.		*/		this.setResult = function(result) {			t.result = result;			while (t.address.childNodes.length > 0) t.address.removeChild(t.address.childNodes[0]);			for(var i = 0; i < result.addresses.length; i++)				t.addRow(result.addresses[i], t.address);		};		/**		 * @method createTableAddress		 * Starts creating the different elements of the displayed table of addresses		 * If No address in result and the user is not allowed to add address, "There is no address linked to this contact" is displayed		 */		this.createTableAddress = function(){			var container = document.getElementById("<?php echo $container_id;?>");			if(!rights.add && typeof(result.addresses[0]) == 'undefined'){				var div = document.createElement("div");				div.innerHTML = "There is no address linked to this contact";				container.appendChild(div);			}			else{				this.createElementTableAddress(container, "address", "Address");			}		};		/**		 * @method createElementTableAddress		 * Create the table containing all the contacts for the given category		 * A distinction is done according to the rights of the user		 * @param container		 * @param contact_type {string} "address"		 * @param contact_type_name {string} the text displayed in the header of the table		 */		this.createElementTableAddress = function(container, contact_type, contact_type_name){			var table = document.createElement("table");			table.style.border = "1px solid #808080";			table.style.borderSpacing = "0";			table.style.marginBottom = "3px";			setBorderRadius(table, 5, 5, 5, 5, 5, 5, 5, 5);			var thead = document.createElement("thead");			var tbody = document.createElement("tbody");			if(contact_type == "address") this.address = tbody;			var tfoot = document.createElement("tfoot");			var tr_head = document.createElement("tr");			var th_head = document.createElement("th");			th_head.colSpan = 2;			th_head.style.textAlign = "left";			th_head.style.padding = "2px 5px 2px 5px";			th_head.innerHTML = "<img src='/static/contact/address_16.png' style='vertical-align:bottom;padding-right:3px'/>"+contact_type_name;			th_head.style.backgroundColor = "#F0F0F0";			setBorderRadius(th_head, 5, 5, 5, 5, 0, 0, 0, 0);			tr_head.appendChild(th_head);			thead.appendChild(tr_head);			table.appendChild(thead);			for(var i = 0; i < this.result.addresses.length; i++)				t.addRow(this.result.addresses[i], tbody);			table.appendChild(tbody);			if(rights.add){				var td_foot_1 = document.createElement('td');				var td_foot_2 = document.createElement('td');				var tr_foot = document.createElement('tr');				td_foot_2.innerHTML = "Add " + contact_type_name;				td_foot_2.style.cursor = 'pointer';				td_foot_2.style.fontStyle ='italic';				td_foot_2.style.color = "#808080";				td_foot_2.contact_type = contact_type;				td_foot_2.contact_type_name = contact_type_name;				td_foot_2.onclick = function(){t.addAddress();};				tr_foot.appendChild(td_foot_1);				tr_foot.appendChild(td_foot_2);				tfoot.appendChild(tr_foot);				table.appendChild(tfoot);			}						container.appendChild(table);		};				/**		 * @method addRow		 * Create a row in the displayed table		 * @param index the index in the result object of the given address		 * @param tbody the reference to the tbody in which the row will be inserted		 */		this.addRow = function(address, tbody,is_new){			var tr = document.createElement("tr");			tr.address = address;			var td_category = document.createElement("td");			td_category.style.textAlign = 'right';			td_category.style.color = "#808080";			td_category.style.verticalAlign = "top";			td_category.style.paddingLeft = "5px";			td_category.style.paddingRight = '5px';			tr.appendChild(td_category);			var td_data = document.createElement("td");			var div_data = document.createElement("div");			td_data.appendChild(div_data);			tr.appendChild(td_category);			tr.appendChild(td_data);			if (t.result.id == -1) {				require("edit_address.js",function(){					new edit_address(div_data, address);				});				t.createCategoryField(td_category,address);			} else if (rights.edit){				/*Manage the category Field*/				t.createCategoryField(td_category,address);				/*Manage the data field*/				var div = document.createElement("div");				div.style.display = 'inline-block';				var edit = new editable_table(div,"Postal_address",address.address_id, 'field_address', null);				/* If we are adding a new address, we immediately open the menu to set the address parameters*/				if(is_new){					/*We must start with the unedit mode otherwize edit.elem is not defined*/					edit.unedit();					setTimeout(function(){edit.edit();},100);				}				div_data.appendChild(div);			}			else{				/*Create the uneditable field_address*/				require("typed_field.js", function(){					require("field_address.js", function(){						var editableAddress = new field_address(address.address_id, false, null, null, null);						div_data.appendChild(editableAddress.getHTMLElement());					});				});				t.createCategoryField(td_category,address);			}			if(t.result.id == -1 || rights.remove){				var div_remove = document.createElement('div');				div_remove.style.display = 'inline-block';				this.addRemoveButton(address,div_remove);				div_data.appendChild(div_remove);			}			tbody.appendChild(tr);		};				/**		 * @method addAddress		 * Add the address in the database(only in the Postal_address table) and call the updateTable%type%_address method with the new id		 */		this.addAddress = function(){			if (t.result.id != -1) {				service.json("contact","add_address",{					table:"<?php echo $type == "people" ? "People_address" : "Organization_address";?>",					column:"<?php echo $type == "people" ? "people" : "organization";?>",					key:t.result.id,					country:null,					geographic_area:null,					street:null,					street_number:null,					building:null,					unit:null,					additional:null, 					address_type:"Work"				},function(res){					if(!res) return;					/* Update the result object*/					var l = t.result.addresses.length;					t.result.addresses[l] = {address_id:res.id, country:null, geographic_area:null, street:null, street_number:null, building:null, unit:null, additional:null, address_type:"Work"};					/* Update the table */					t.addRow(t.result.addresses[l],t.address,true);				});			} else {				/* Update the result object*/				var l = t.result.addresses.length;				t.result.addresses[l] = {address_id:-1, country:null, geographic_area:null, street:null, street_number:null, building:null, unit:null, additional:null, address_type:"Work"};				/* Update the table */				t.addRow(t.result.addresses[l],t.address,true);			}		};				/**		 * @method addRemoveButton		 * Will add a removeButton to the given container		 * @param container		 * @param address		 */		this.addRemoveButton = function (address, container){			var remove_button = document.createElement('img');			remove_button.src = theme.icons_16.remove;			remove_button.onmouseover = function(e){this.src = theme.icons_16.remove_black; stopEventPropagation(e);};			remove_button.onmouseout = function(e){this.src = theme.icons_16.remove; stopEventPropagation(e);};			remove_button.style.cursor = 'pointer';			//remove_button.style.verticalAlign = 'bottom';			remove_button.onclick = function(){				confirm_dialog("Are you sure you want to remove this address?", function(text){if(text) t.removeAddress(address);});			};			container.appendChild(remove_button);		};				/**		 * @method removeAddress		 * Remove an address from the database, from the result object, and from the displayed table		 * @param address		 */		this.removeAddress = function (address){			if (t.result.id != -1) {				/*Remove from database*/				service.json("data_model","remove_row",{table:"Postal_address", row_key:address.address_id}, function(res){					if(!res) return;					for (var i = 0; i < t.address.childNodes.length; ++i)						if (t.address.childNodes[i].address == address)							t.address.removeChild(t.address.childNodes[i]);					t.result.addresses.remove(address);				});			} else {				for (var i = 0; i < t.address.childNodes.length; ++i)					if (t.address.childNodes[i].address == address)						t.address.removeChild(t.address.childNodes[i]);				t.result.addresses.remove(address);			}		};				/**		 * @method createCategoryField		 * Create the category column in the displayed table		 * @param container the one which will contain the category field		 * @param address		 */		this.createCategoryField = function (container,address){			this.context = null;			container.innerHTML = address.address_type;			container.style.cursor = "pointer";			container.onclick = function(){t.addContext(container,address);};		};				/**		 * @method addContext		 * Create the context_menu displayed below the category field after clicking		 * @param container		 * @param index the index in the result object of the address to which this category is linked		 */		this.addContext = function(container,address){			require('context_menu.js',function(){				if(!t.context){					t.context = new context_menu();					t.context.onclose = function() {t.context = null;};				}				t.context.clearItems();				t.setContext(container, "Work", address);				t.setContext(container, "Home", address);				t.setContext(container, "Custom", address);								t.context.showBelowElement(container);			});		};				/**		 * @method setContext		 * Add an item to the category context_menu		 * @param container the one which contains the category field		 * @param {string} data the value of the item		 * @param address		 * In the custom case, an input field is created		 */		this.setContext = function(container, data, address){			var item = document.createElement('div');			item.innerHTML = data;						if(address.address_type == data) item.style.fontWeight ='bold';			if(data == "Custom"){				var input = document.createElement("INPUT");				input.type = 'text';				input.maxLength = 10;				input.size = 10;				item.appendChild(input);				t.context.onclose = function(){					if(input.value.checkVisible()){						t.saveSubType(address, input.value.uniformFirstLetterCapitalized(),container);					}				};				input.onkeypress = function(e){var ev = getCompatibleKeyEvent(e);										if(ev.isEnter) t.context.hide();									};			}			else{				item.onclick = function(){					t.saveSubType(address,data,container);				};			}			var temp = item.style.backgroundColor;			item.onmouseover = function(){this.style.backgroundColor ='#808080';};			item.onmouseout = function(){this.style.backgroundColor = temp;};			item.style.cursor = 'pointer';			t.context.addItem(item);			if(data == "Custom") item.onclick = null;		};				/**		 * @method saveSubType		 * Method called by the items of the category context menu on click		 * Update the database, the result object and the displayed table		 * @param address_id the id of the contact to update		 * @param sub_type the updated one		 * @param container the one which contains the category field		 */		this.saveSubType = function(address, sub_type,container){			if (t.result.id != -1) {				service.json("data_model","save_entity",{table:"Postal_address",key:address.address_id, field_address_type:sub_type, lock:-1},function(res){					if(!res) return;					container.innerHTML = sub_type;					address.address_type = sub_type;				});			} else {				container.innerHTML = sub_type;				address.address_type = sub_type;			}		};				if (editable != null) everything_ready();				require('editable_table.js',function(){			editable = 'ok';			everything_ready();		});	}	</script>	<?php	return $fct_name;}?>