<?php/** * The rights of the user is taken into account to set this page * This page needs no service to be generated * @param $type {string} can be 'people' or 'organization' * @param $container_id {string} the id of the container which will contain the page * @param $id the people_id or organization_id, or -1 for a new one * @return string the name of the javascript constructor to call */ function address(&$page,$type,$container_id,$id){	require_once("component/data_model/Model.inc");	$rights = array();		$table_address = null;	$join_address_column = null;	$join_value = $id;	if($type == "people"){		$table_address = "People_address";		$join_address_column = "people";		$rights['remove'] = DataModel::get()->getTable("People_address")->canRemove();		$rights['edit'] = DataModel::get()->getTable("People_address")->canModifyField('address');		$rights['add'] = DataModel::get()->getTable("People_address")->canAdd();	}	if($type == "organization"){		$table_address = "Organization_address";		$join_address_column = "organization";		$rights['remove'] = DataModel::get()->getTable("Organization_address")->canRemove();		$rights['edit'] = DataModel::get()->getTable("Organization_address")->canModifyField('address');		$rights['add'] = DataModel::get()->getTable("Organization_address")->canAdd();	}	if($id <> -1){		$q_addresses = SQLQuery::create()->select($table_address)						->field($table_address,"address","address_id")						->field("Postal_address","country","country")						->field("Postal_address","geographic_area","geographic_area")						->field("Postal_address","street","street")						->field("Postal_address","street_number","street_number")						->field("Postal_address","building","building")						->field("Postal_address","unit","unit")						->field("Postal_address","additional","additional")						->field("Postal_address","address_type","address_type")						->join($table_address,"Postal_address",array("address"=>"id"))						->where($table_address.".".$join_address_column." = '".SQLQuery::escape($join_value)."'");		$addresses = $q_addresses->execute();	}	$addresses_var_name = $page->generate_id();	?>	<script type='text/javascript'>	<?php	echo $addresses_var_name." = [";	if ($id <> -1) {		$first = true;		foreach($addresses as $address){			if($first) $first = false; else echo ", ";			echo "{";			echo "id:".json_encode($address["address_id"]);			echo ", country:".json_encode($address["country"]);			if ($address["geographic_area"] == null)				echo ", geographic_area: null";			else				echo ", geographic_area: { id:".$address["geographic_area"].", text:".json_encode(PNApplication::$instance->geography->get_geographic_area_text($address["geographic_area"]))." }";			echo ", street_name:".json_encode($address["street"]);			echo ", street_number:".json_encode($address["street_number"]);			echo ", building:".json_encode($address["building"]);			echo ", unit:".json_encode($address["unit"]);			echo ", additional:".json_encode($address["additional"]);			echo ", address_type:".json_encode($address["address_type"]);			echo "}";		}	}	echo "];";	$page->add_javascript("/static/contact/addresses.js");	$var_id = $page->generate_id();	$page->onload("window.$var_id = new addresses(".json_encode($container_id).",true,".json_encode($table_address).",".json_encode($join_address_column).",".json_encode($id).",".$addresses_var_name.",".$rights['edit'].",".$rights['add'].",".$rights['remove'].");");	?>	</script>	<?php	return $var_id;}?>