/** Address field: if editable, it will be a text input with the edit_address screen, else only a simple text node * @constructor * @param config.lock the lock id given by editable_table */function field_address(data,editable,onchanged,onunchanged,config){	if (data != null && data.length == 0) data = null;	typed_field.call(this, data, editable, onchanged, onunchanged);	var t = this;	t.structure = null;	t.structureHasChanged = false;	if(editable){		t.cont = null;		t.cont = document.createElement("div");		t.cont.style.margin = "0px";		t.cont.style.padding = "0px";		var f = function() {			setTimeout(function() {				if (t.addressId != data) {					if (onchanged)						onchanged(t,t.addressId);				} else {					if (onunchanged)						onunchanged(t);				}			},1);		};				// t.cont.style.cursor = 'pointer';		// t.cont.onclick = function(e){		this.createMenu = function(){			//stopEventPropagation(e);			require("edit_address.js",function(){				require("context_menu.js",function(){					service.json("contact","get_address",{address_id:data},function(res){					if(!res) return;					var menu = new context_menu();					var div = document.createElement('div');					t.address = new edit_address(div,res);					menu.addItem(div,true);					menu.removeOnClose = true;					menu.showBelowElement(t.cont);					menu.onclose = function(){						/*Get the structure to save*/						var new_structure = t.address.getStructure();						if(new_structure != t.structure){							t.structure = new_structure;							t.structureHasChanged = true;							if(t.cont.firstChild != null) t.cont.removeChild(t.cont.firstChild);							require("address_text.js",function(){								var text = new address_text(t.structure, function(obj){								var div = document.createElement('div');								obj.getAddressText(div);								t.cont.appendChild(div);								});							});						}					};					});				});			});			//return false;		}				this.setData = function(data,first){			t.addressId = data;			if(data == null){				t.cont.innerHTML = "No address";				t.cont.style.fontStyle = "italic";			} else {				require("address_text.js",function(){					var text = new address_text(data, function(obj){					var div = document.createElement('div');					obj.getAddressText(div);					t.cont.appendChild(div);					});				});			}			t.createMenu();			f();		}		this.setData(data,true);				this.element = t.cont;		this.element.typed_field = this;		this.getCurrentData = function(){			if(t.cont.innerHTML.length == 0) return null;			return t.addressId;		}		this.signal_error = function(error){			t.cont.style.border = error ? "1px solid red" : "";		}				/**		 * config.lock is optional. If unset, config.lock = -1;		 */		this.save = function(onsaved){			if(!t.structureHasChanged) return false;			else{				if(typeof(config) != "undefined" && config != null){					if(typeof(config.lock) != "undefined") lock_id = config.lock;				} else lock_id = "-1";				var to_save = [];				var table = "Postal_address";								var row_key_name = "id";				var row_key_value = t.addressId;				to_save[0] = {table:table, sub_model:null, column:"country", row_key_name:row_key_name, row_key_value:row_key_value, value:t.structure.country_id, lock_id:lock_id};				to_save[1] = {table:table, sub_model:null, column:"geographic_area", row_key_name:row_key_name, row_key_value:row_key_value, value:t.structure.area_id, lock_id:lock_id};				to_save[2] = {table:table, sub_model:null, column:"street", row_key_name:row_key_name, row_key_value:row_key_value, value:t.structure.street, lock_id:lock_id};				to_save[3] = {table:table, sub_model:null, column:"street_number", row_key_name:row_key_name, row_key_value:row_key_value, value:t.structure.street_number, lock_id:lock_id};				to_save[4] = {table:table, sub_model:null, column:"building", row_key_name:row_key_name, row_key_value:row_key_value, value:t.structure.building, lock_id:lock_id};				to_save[5] = {table:table, sub_model:null, column:"unit", row_key_name:row_key_name, row_key_value:row_key_value, value:t.structure.unit, lock_id:lock_id};				to_save[6] = {table:table, sub_model:null, column:"additional", row_key_name:row_key_name, row_key_value:row_key_value, value:t.structure.additional, lock_id:lock_id};				service.json("data_model","save_data",{to_save:to_save},function(res){					onsaved();					if(!res) return;				});				t.structureHasChanged = false;				return true;			}		}	} else {		this.element = document.createElement('div');		this.setData = function(data, first){			this.addressId = data;			if(data == null){				t.element.innerHTML = "No address";				t.element.style.fontStyle = "italic";			} else {				require("address_text.js",function(){					var text = new address_text(data);					t.element.appendChild(text.element);				});			}			if (!first){				if (data == this.originalData) {					if (onunchanged) onunchanged(this);				} else {					if (onchanged) onchanged(this, val);				}			}		};				this.setData(data,true);		this.getCurrentData = function(){			return t.addressId;		};	}}if (typeof typed_field != 'undefined') {	field_address.prototype = new typed_field();	field_address.prototype.constructor = field_address;		}