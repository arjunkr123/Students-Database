/** * This javascript does not save / lock any data. When users update a field, the structure object is updated (with an additional field corresponding to the country code) * @param container * @param structure the javascript object given by get_address service * Use the getStructure method to get the updated structure object */function edit_address(container, structure){	if(typeof(container) == 'string') var container = document.getElementById(container);	var t = this;	t.address_id = structure.id;	t.table = null;	t.countries = null;	t.tr_area = null;	t.structure = structure;		t.editableArea = null;		service.json("geography","get_countries_list",null, function(res){		if(!res) return;		t.countries = res;		t.init(container);	});		/**	 * @method init	 * Start creating the displayed table with one row per field	 * @param cont the container to which the created table will belong	 */	this.init = function (cont){		var form = document.createElement('form');		form.method = 'post';		form.action = '';		t.table = document.createElement('table');		t.table.appendChild(t.completeRow(document.createElement('tr'), "country"));		t.table.appendChild(t.completeRow(document.createElement('tr'), "area_id"));		t.table.appendChild(t.completeRow(document.createElement('tr'), "street"));		t.table.appendChild(t.completeRow(document.createElement('tr'), "street_number"));		t.table.appendChild(t.completeRow(document.createElement('tr'), "building"));		t.table.appendChild(t.completeRow(document.createElement('tr'), "unit"));		t.table.appendChild(t.completeRow(document.createElement('tr'), "additional"));		form.appendChild(t.table);		cont.appendChild(form);	}		/**	 * @method completeRow	 * Complete the given row, depending on the field	 * @param tr the row to complete	 * @param field the name of the field in the structure object	 * For country a select with all the existing countries in the database is created. Selecting a new country will reset the geographic area selected. This way the select area field can perform the research in the right geographic structure	 * @return the reference of the given tr	 */	this.completeRow = function (tr, field){		var td1 = document.createElement('td');		var td2 = document.createElement('td');		var div1 = document.createElement('div');		var input = document.createElement('input');		switch(field){			case "country":				div1.innerHTML = "Country";				var div2 = document.createElement('div');				t.createSelectCountry(div2);				td2.appendChild(div2);			break;			case "area_id":				div1.innerHTML = "Geographic Area";				var div2 = document.createElement('div');				//t.createEditable(div2, "geographic_area", "field_area", {country_code:t.country_code}, t.structure.area_id);				var config = {};				config.country_code = t.structure.country_code;				t.createFieldArea(div2, t.structure.area_id, config);				td2.appendChild(div2);			break;			case "street":				div1.innerHTML = "Street Name";				input.value = t.structure.street;				input.onblur = function(){t.onchange("street", input.value)};				td2.appendChild(input);			break;			case "street_number":				div1.innerHTML = "Street Number";				input.value = t.structure.street_number;				input.onblur = function(){t.onchange("street_number", input.value)};				td2.appendChild(input);			break;			case "building":				div1.innerHTML = "Building";				input.value = t.structure.building;				input.onblur = function(){t.onchange("building", input.value)};				td2.appendChild(input);			break;			case "unit":				div1.innerHTML = "Unit";				input.value = t.structure.unit;				input.onblur = function(){t.onchange("unit", input.value)};				td2.appendChild(input);			break;			case "additional":				div1.innerHTML = "Additional";				input.value = t.structure.additional;				input.onblur = function(){t.onchange("additional", input.value)};				td2.appendChild(input);			break;			default: return;		}		td1.appendChild(div1);		tr.appendChild(td1);		tr.appendChild(td2);		if(field == "area_id") t.tr_area = tr;		return tr;	}		/**	 * @method createFieldArea	 * Create a field area in the editable mode. The screen to select an area is handled by the field_area object	 * @param cont the container of the field_area	 * @param data the area_id corresponding to the area to display	 * @param config the config object needed by the field_area. config.country_code contains the country code that matches with the selected country	 */	this.createFieldArea = function(cont, data, config){		require("typed_field.js", function(){			require("field_area.js", function(){				t.editableArea = new field_area(data, true, t.onchangedArea, null, config);				cont.appendChild(t.editableArea.element);			});		});	}		/**	 * @method createSelectCountry	 * Set the select that contains the country list. Changing country will reset the area_field with the new country code	 * @param cont the container of the select	 */	this.createSelectCountry = function (cont){				var select = document.createElement('select');		select.onchange = function(){			var option = this.options[this.selectedIndex];			/* Update structure object */			t.structure.country_code = option.value;			t.structure.area_id = null;			t.structure.area_text = [];			var country_infos = t.getCountryInfo(option.value);			t.structure.country_name = country_infos.country_name;			t.structure.country_id = country_infos.country_id;			/*We update the tr_area with the good value of country_code*/			t.table.removeChild(t.tr_area);			t.tr_area = null;			var tr = t.table.insertRow(1);			t.tr_area = t.completeRow(tr,"area_id");		};		var empty_option = document.createElement("option");		empty_option.value = null;		select.appendChild(empty_option);		for(var i = 0; i < t.countries.length; i++){			var option = document.createElement('option');			option.value = t.countries[i].country_code;			option.innerHTML = t.countries[i].country_name;			/* We select the good option */			if(option.value == t.structure.country_code) option.selected = true;			select.appendChild(option);		}		cont.appendChild(select);			}		/**	 * @method getCountryInfo	 * @param code the country_code of the country you are looking for	 * @return {object} with two attributes country_name & country_id	 */	this.getCountryInfo = function(code){		var res = {};		for(var i = 0; i < t.countries.length; i++){			if (t.countries[i].country_code.toLowerCase() == code.toLowerCase()){				res.country_name = t.countries[i].country_name;				res.country_id = t.countries[i].country_id;				break;			}		}		return res;	}		/**	 * @method onchangedArea	 * Update the structure object and the text displayed in the area field onchange of the area	 * @param editableArea the reference to the area_field: required by the field_area object	 * @param new_value the new area_id	 * @param new_text the new text corresponding to the area_id	 */	this.onchangedArea = function(editableArea, new_value, new_text){		/*Update the structure*/		t.structure.area_id = new_value;		t.structure.area_text = [];		if(typeof(new_text) == "string"){			var text_split = new_text.split(", ");			for(var i = 0; i < text_split.length; i++){				t.structure.area_text[i] = text_split[i];			}		}	}		/**	 * @method onchange	 * Every time the user changes a field in the displayed table, the structure object is updated	 * @param field the name of the field to update in the structure object	 * @param {string} new_value	 */	this.onchange = function(field, new_value){		if(new_value.checkVisible()){			new_value = new_value.uniformFirstLetterCapitalized();		}		else new_value = null;		t.structure[field] = new_value;	}		/**	 * @method getStructure	 * Call this method to get the updated structure. For instance onclosing a context_menu that contains the edit_address screen	 * @return the structure object	 */	this.getStructure = function () {		return t.structure;	}}