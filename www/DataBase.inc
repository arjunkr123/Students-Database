<?php
/** This class only aims at giving easy access to the DataBase connection */
class DataBase {

	/** @var $conn DataBaseSystem */
	public static $conn;

	/** Execute an SQL query
	 * @param string $sql_query the query to execute
	 * @param boolean $report_errors true to put database errors in PNApplication
	 * @return resource the result returned by the database system
	 */
	public static function execute($sql_query, $report_errors = true) { return DataBase::$conn->execute($sql_query, $report_errors); }
	/** Retrieve the next row from a result
	 * @param resource $query_result the result from execute
	 * @return array the next row
	 */
	public static function nextRow($query_result) { return DataBase::$conn->nextRow($query_result); }
	/** Get the ID generated by the last insert
	 * @return integer ID generated by INSERT
	 */
	public static function getInsertID() { return DataBase::$conn->getInsertID(); }
	/** Return the number of rows affected by the last query
	 * @return integer number of rows
	 */
	public static function affectedRows() { return DataBase::$conn->affectedRows(); }
	/** Get the last error number from database system
	 * @return integer error number
	 */
	public static function getLastErrorNumber() { return DataBase::$conn->getLastErrorNumber(); }
	/** Get the last error message from database system
	 * @return string error message
	 */
	public static function getLastErrorMessage() { return DataBase::$conn->getLastErrorMessage(); }

	/** Escape the given string to use it as value in an SQL query
	 * @param string $str the value to escape
	 * @return string escaped value
	 */
	public static function escapeString($str) { return DataBase::$conn->escapeString($str); }

}

global $db_config;
require_once("DataBaseSystem_".$db_config["type"].".inc");
$db_system_class = "DataBaseSystem_".$db_config["type"];
DataBase::$conn = new $db_system_class;
DataBase::$conn->connect($db_config["server"], $db_config["user"], $db_config["password"], null, @$db_config["port"]);
?>