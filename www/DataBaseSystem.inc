<?php
/** Basic abstraction layer on the DBMS used */
abstract class DataBaseSystem {

	const ERR_OK = 0;
	const ERR_CANNOT_CONNECT_TO_SERVER = 1;
	const ERR_INVALID_CREDENTIALS = 2;
	const ERR_DB_DOES_NOT_EXIST = 3;
	/** Connect to the given server, using given credentials and database name, returns one of the defined constant
	 * @param string $server server name or IP
	 * @param string $username username
	 * @param string $password password
	 * @param string|null $db_name database to select, or null 
	 * @param number|null $port port number
	 */
	public abstract function connect($server, $username, $password, $db_name = null, $port = null);

	/** Executes a SQL request.
	 * @SuppressWarnings(PHPMD.BooleanArgumentFlag)
	 * @param string $sql_query SQL query to execute
	 * @param boolean $report_errors if true and an error occurs, the error will be added to <code>PNApplication</code>
	 * @return resource the result of the query
	 */
	public function execute($sql_query, $report_errors = true) {
		if (empty($sql_query)) throw new Exception("Empty SQL Query!");
#DEV
		$start = microtime(true);
#END
		$res = $this->executeSQL($sql_query);
#DEV
		$end = microtime(true);
		$this->log($sql_query,$this->getLastErrorNumber(),$this->getLastErrorMessage(),$end-$start);
#END
		if ($res === false && $report_errors) {
			$err = $this->getLastErrorNumber();
			if ($err <> 0) {
				try {
					throw new Exception("DataBase Error #".$err.": ".$this->getLastErrorMessage()." [".$sql_query."]");
				} catch (Exception $e) {
					PNApplication::error($e);
				}
			}
		}
		return $res;
	}
#DEV	
	/** For debug purposes, log a query in the session
	 * @param string $query the SQL query executed
	 * @param integer $error_number the error number after the query has been executed
	 * @param string $error_message the error message after the query has been executed
	 * @param integer $time time in microseconds the execution took
	 */
	public function log($query, $error_number, $error_message, $time) {
		if (!isset(PNApplication::$instance->components["development"])) return;
		if (PNApplication::$instance->development->current_request() == null) return;
		if (count(PNApplication::$instance->development->current_request()->sql_queries) == 200)
			array_push(PNApplication::$instance->development->current_request()->sql_queries, array("TOO MUCH SQL QUERIES",0,null,0));
		else if (count(PNApplication::$instance->development->current_request()->sql_queries) < 200) {
			try { throw new Exception(); } catch (Exception $e) {
				$t = array(); 
				foreach ($e->getTrace() as $trace)
					if (isset($trace["file"]) && isset($trace["line"]))
						array_push($t, array($trace["file"],$trace["line"]));
			}
			array_push(PNApplication::$instance->development->current_request()->sql_queries, array($query, $error_number, $error_message, $time, $t));
		}
	}
#END
	/** Select a database for sub-sequent queries
	 * @param string $db_name name of the database
	 */
	public abstract function selectDatabase($db_name);
	/** Execute an SQL query
	 * @param string $query the SQL query to execute
	 * @return resource the result of the query
	 */
	protected abstract function executeSQL($query);
	/** Retrieve the next row from a result
	 * @param resource $query_result the result from execute
	 * @return array the next row
	 */
	public abstract function nextRow($query_result);
	public abstract function nextRowArray($query_result);
	public abstract function fetchRows($query_result);
	public abstract function fetchRowsArray($query_result);
	
	/** Get the ID generated by the last insert
	 * @return integer ID generated by INSERT
	 */
	public abstract function getInsertID();
	/** Return the number of rows affected by the last query
	 * @return integer number of rows
	 */
	public abstract function affectedRows();
	/** Get the last error number from database system
	 * @return integer error number
	 */
	public abstract function getLastErrorNumber();
	/** Get the last error message from database system
	 * @return string error message
	 */
	public abstract function getLastErrorMessage();
	
	/** Start a transaction */
	public abstract function startTransaction();
	/** Commit the current transaction */
	public abstract function commit();
	/** Cancel and rollback the current transaction */
	public abstract function rollback();

	/** Escape the given string to use it as value in an SQL query
	 * @param string $str the value to escape
	 * @return string escaped value
	 */
	public abstract function escapeString($str);

}
?>